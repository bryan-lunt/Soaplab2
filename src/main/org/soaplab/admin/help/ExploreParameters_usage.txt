ExploreParameters
=================
   build/run/run-any-client org.soaplab.admin.ExploreParameters [options]

where <options> are:

  -h[elp]  ... print this help
  -q       ... "quiet" (less verbose mode)
  -stack   ... in case of any error it print the stact trace
               (without this option, it prints it only when a
                serious runtime error occures)

A mandatory option is a service name whose parameters are going to be
explored:

  -name <service-name>

Sometimes, especially when this program is used for batch testing,
you wish to add a new list of applications (previously generated by an
ACD to XML converter) without changing soaplab.properties file:

  -addlist <list-file-name>

Exploring metadata is the same as in CmdLineClient. It is included
here for convenience because it may be handy to know names of the
input/output data:

  -i  ... show names of analysis inputs
  -ii ... show names and attributes of analysis inputs
  -o  ... show names of possible results
  -oo ... show names and types of possible results

Existing metadata of the analysis being explored can be changed
on-the-fly (simulating the change of the ACD description file without
a need to do so manually and generate the whole XML metadata file
again). The following changes are possible:

  -m <method-template>
     global template substituing
        comments: "method XXXX"
     in the application section of the ACD file

  -m<input_name> <parameter-method-template>
  -m_<input_name> <parameter-method-template>
     substituting template for individual parameters

  -e<input_name>
  -e_<input_name>
     adding option "envar" to individual parameters
     (which measn that the parameter does not appear on the
      command-line but it creates an environment property)

The main output is how a command-line would look like, and what
environment properties would be created. This is a default behaviour
unless -arg option is given:

  -arg  ... show how individual parameters will be created

  -narg ... show 'named arguments' structures

All remaining options are input data (values for parameters that will
constitued the analysis command-line). The names can be found using
option -i. The recognized formats are:

  <input-name> <input-value>
     for boolean inputs the <input-value> should be
     'true' or 'false' (but see also below -<input-name>);

     some inputs allow multiple (repetitive) values - they can be
     entered using a bar character as separator '|', for example:
        name 'Kim|Blanka'
     (note that the quote characters must be there to avoid the UNIX
      shell to misinterpret the bar character);
     you need to quote the value if the bar character should be part
     of the value, for example (again, double quoting is because of
     the UNIX shell):
        name "'this|is|not|a|pipe'"  (means just single value)
                     
  <input-name> :<input-value>
     a value starting with ':' is treated as a file name
     and the contents of this file is used as an input

     multiple (repetitive) values with file names are also allowed:
        name ':file1|:file2|not-a-file'

  -<input-name>
     can be used for boolean parameters and it means
     the same as:
       <input-name> true
