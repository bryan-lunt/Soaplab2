# @(#)yaccpar 1.8 (Berkeley) 01/20/91 (JAKE-P5BP-0.6 04/26/98)
package ACDParser;
$ADDITIONAL=257;
$AEXTENSION=258;
$AFORMAT=259;
$AGLOBAL=260;
$ALIGNMENT=261;
$ALIGNED=262;
$ANAME=263;
$AOPENFILE=264;
$APPEND=265;
$APPLICATION=266;
$AUSASHOW=267;
$AWIDTH=268;
$ARRAY=269;
$BATCH=270;
$BORDER=271;
$BOOLEAN=272;
$BUTTON=273;
$CASESENSITIVE=274;
$CHARACTERS=275;
$CODE=276;
$CODEDELIMITER=277;
$CODON=278;
$COMMENT=279;
$CONTINOUS=280;
$CORBA=281;
$CREATE=282;
$CPU=283;
$DATA_TYPES=284;
$DATAFILE=285;
$DEFAULT=286;
$DELIMITER=287;
$DIRECTORY=288;
$DIRECTORY_ATTR=289;
$DIRLIST=290;
$DISCRETESTATES=291;
$DISTANCES=292;
$DOCUMENTATION=293;
$ENDSECTION=294;
$ENTRY=295;
$EXECUTABLE=296;
$EXPECTED=297;
$EXTENSION=298;
$EXTERNAL=299;
$EMBASSY=300;
$FAILRANGE=301;
$FEATOUT=302;
$FEATURES=303;
$FILELIST=304;
$FOLDER=305;
$FLOAT=306;
$FREQUENCIES=307;
$GDESC=308;
$GENEDATA=309;
$GOUTFILE=310;
$GRAPH=311;
$GROUPS=312;
$GSUBTITLE=313;
$GTITLE=314;
$GUI=315;
$GXTITLE=316;
$GYTITLE=317;
$HEADER=318;
$HELP=319;
$INCREMENT=320;
$INFILE=321;
$INFORMATION=322;
$INTEGER=323;
$KNOWNTYPE=324;
$LENGTH=325;
$LIST=326;
$LOWER=327;
$MATRIX=328;
$MATRIXF=329;
$MAXIMUM=330;
$MAXLENGTH=331;
$MAXREADS=332;
$MAXSEQS=333;
$MINIMUM=334;
$MINLENGTH=335;
$MINSEQS=336;
$MINSIZE=337;
$MINTAGS=338;
$MISSING=339;
$MISSVAL=340;
$MULTIPLE=341;
$NAME=342;
$NONEMBOSS=343;
$NNAME=344;
$NULLOK=345;
$NULLDEFAULT=346;
$OBO=347;
$OBSOLETE=348;
$ODIRECTORY=349;
$OFORMAT=350;
$OFNAME=351;
$OFFORMAT=352;
$OSEXTENSION=353;
$OSSINGLE=354;
$OUTCODON=355;
$OUTDIR=356;
$OUTFILE=357;
$OUTPUTMODIFIER=358;
$OUTOBO=359;
$OUTRESOURCE=360;
$OUTTAXON=361;
$OUTTEXT=362;
$OUTURL=363;
$PARAMETER=364;
$PATTERN=365;
$PATTERN_=366;
$PMISMATCH=367;
$PNAME=368;
$PRECISION=369;
$PROMPT=370;
$PROPERTIES=371;
$PROTEIN=372;
$QUALIFIER=373;
$RANGE=374;
$REGEXP=375;
$RELATIONS=376;
$REPORT=377;
$RESOURCE=378;
$REXTENSION=379;
$RFORMAT=380;
$RNAME=381;
$ROPENFILE=382;
$RSCORESHOW=383;
$RUSASHOW=384;
$SASK=385;
$SECTION=386;
$SELECTION=387;
$SEQALL=388;
$SEQOUT=389;
$SEQOUTALL=390;
$SEQOUTSET=391;
$SEQSET=392;
$SEQSETALL=393;
$SEQUENCE=394;
$SIDE=395;
$SIZE=396;
$STANDARD=397;
$STRING=398;
$STYLE=399;
$SUM=400;
$SUMTEST=401;
$SUPPLIER=402;
$TAGLIST=403;
$TAXON=404;
$TEMPLATE=405;
$TEXT=406;
$TOGGLE=407;
$TOLERANCE=408;
$TREE=409;
$TRUEMINIMUM=410;
$TRYDEFAULT=411;
$TYPE=412;
$UPPER=413;
$URL=414;
$VALID=415;
$VALUE=416;
$VALUES=417;
$VARIABLE=418;
$VERSION=419;
$WITHIN=420;
$WARNRANGE=421;
$WORD=422;
$XYGRAPH=423;
$W2HUNKNOWN=424;
$YYERRCODE=256;
@yylhs = (                                               -1,
    0,    1,    4,    4,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    2,    2,
    2,    7,    8,    9,   10,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,   12,   14,
   16,   18,   20,   22,   23,   24,   25,   28,   26,   29,
   31,   33,   35,   37,   38,   40,   42,   44,   45,   47,
   49,   50,   51,   52,   53,   54,   55,   56,   58,   59,
   61,   76,   63,   65,   71,   72,   75,   74,   69,   70,
   67,   78,   80,   82,   84,   86,   88,   90,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   13,   13,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   95,   95,   95,   95,   95,   95,   95,   17,
   17,   19,   19,   96,   96,   96,   27,   27,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   21,   21,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   48,   48,   99,   99,   99,   99,   99,
   99,   99,   30,   30,  100,   32,   32,  101,  101,   36,
   36,  103,  103,  103,  103,  103,  103,  103,  103,  103,
   39,   39,  102,  102,  102,  102,  102,   41,   41,  104,
   43,   43,  106,  106,  106,  106,  107,  107,  107,   46,
   46,   57,   57,  108,  108,  108,  108,  108,  108,  108,
   60,   60,  109,  109,  109,  109,  109,   77,   77,  110,
  110,  110,  110,  110,   62,   62,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  112,  112,   64,   64,   11,   11,  113,  113,  113,
  113,  113,   66,   66,  105,  105,  105,  105,  105,  105,
  105,  105,  105,   68,   68,  114,  114,  114,  114,  114,
  114,  114,  114,   73,   73,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,   79,   79,  116,  116,  116,
  117,  117,  117,   81,   81,  118,  118,  118,   83,   83,
   92,   92,  119,  119,  119,   89,   89,   91,   91,  120,
  120,  120,    3,    3,   85,   85,   15,   15,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,   34,   34,
  122,  122,  122,  122,  122,  122,  122,   87,   87,  123,
  123,  123,
);
@yylen = (                                                2,
    2,    6,    0,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    0,    2,
    2,    3,    6,    3,    1,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    4,    5,    6,    6,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    0,    2,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    0,
    2,    0,    2,    1,    3,    3,    0,    2,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    0,    2,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    0,    2,    1,    3,    3,    3,    3,
    3,    3,    0,    2,    1,    0,    2,    1,    3,    0,
    2,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    0,    2,    1,    3,    3,    3,    3,    0,    2,    1,
    0,    2,    1,    3,    3,    3,    1,    3,    3,    0,
    2,    0,    2,    1,    3,    3,    3,    3,    3,    3,
    0,    2,    1,    3,    3,    3,    3,    0,    2,    1,
    3,    3,    3,    3,    0,    2,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    0,    2,    0,    2,    1,    3,    3,
    3,    3,    0,    2,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    0,    2,    1,    3,    3,    3,    3,
    3,    3,    3,    0,    2,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    0,    2,    1,    3,    3,
    1,    3,    3,    0,    2,    1,    3,    3,    0,    2,
    0,    2,    1,    3,    3,    0,    2,    0,    2,    1,
    3,    3,    1,    1,    0,    2,    0,    2,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    0,    2,
    1,    3,    3,    3,    3,    3,    3,    0,    2,    1,
    3,    3,
);
@yydefred = (                                             0,
    0,    0,   19,  363,  364,    0,    0,    0,   79,   80,
   81,   82,   83,   84,   85,   86,   87,   89,   88,   90,
   91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
  112,  111,  113,   25,  114,  115,  116,  117,  118,  119,
  120,  121,  122,  123,  124,  125,  126,  127,    0,  128,
    0,   20,   21,   19,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   22,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    2,    4,   75,    0,  351,    0,  296,  151,  367,  170,
  172,  189,  189,  189,  189,  189,  177,  177,  213,  216,
  379,  220,  189,  231,  238,  241,  241,  250,  204,  189,
  189,  189,  189,  189,  189,  189,  252,  189,  261,  275,
  294,  303,  314,  314,  314,  314,  324,  324,  324,  268,
  336,  344,  349,  365,  388,  356,  358,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   76,    0,   24,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    8,   14,    9,    5,   11,
   12,   10,    6,    7,   13,   18,   17,   15,   16,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   78,  352,    0,    0,    0,    0,   23,  298,  297,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   26,  153,  152,  154,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   27,  369,
  368,   28,  171,    0,    0,   29,  174,  173,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,  191,  190,   31,   32,   33,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   35,  179,  178,   36,
   37,  215,  214,    0,    0,    0,    0,    0,   38,  233,
  217,  218,    0,    0,    0,    0,    0,    0,   39,  381,
  380,    0,    0,    0,    0,    0,    0,    0,    0,   40,
  222,  221,   41,   42,  232,    0,    0,    0,    0,    0,
    0,    0,    0,   43,  305,  239,  240,    0,    0,    0,
   44,  243,  242,   45,    0,    0,   46,  247,  251,    0,
    0,    0,    0,    0,    0,   47,  206,  205,   48,   49,
   50,   51,   52,   53,   54,    0,    0,    0,    0,    0,
    0,   55,  254,  253,   56,    0,    0,    0,    0,   57,
  263,  262,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   58,  277,  276,    0,
   59,  292,  295,   60,  304,    0,    0,    0,    0,    0,
    0,    0,   61,  316,  315,   62,   63,   64,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   65,  326,  325,
   66,   67,    0,    0,    0,    0,   68,  270,  269,    0,
    0,   69,  338,  337,    0,    0,   70,  341,  345,    0,
    0,   71,  346,  350,   72,  366,    0,    0,   73,  390,
  389,    0,    0,   74,  353,  357,    0,    0,   77,  360,
  359,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
  132,  143,  141,  129,  135,  149,  133,  131,  146,  139,
  140,  138,  130,  145,  148,  136,  142,  144,  150,  134,
  147,  300,  302,  301,  299,  165,  163,  169,  166,  164,
  168,  167,  159,  158,  160,  155,  161,  162,  157,  156,
  372,  371,  370,  373,  375,  376,  377,  378,  374,  175,
  176,  201,  196,  202,  195,  194,  197,  193,  199,  200,
  198,  203,  192,  188,  181,  187,  180,  185,  186,  182,
  183,  184,  236,  235,  234,  219,  237,  384,  385,  382,
  387,  383,  386,  228,  225,  224,  226,  227,  229,  230,
  223,  309,  310,  306,  312,  311,  308,  307,  313,  245,
  244,  246,  248,  249,  208,  207,  210,  209,  211,  212,
  259,  256,  255,  258,  257,  260,  265,  264,  266,  267,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  293,  321,  319,  318,  322,  320,
  323,  317,  335,  328,  329,  327,  332,  333,  331,  330,
  334,  273,  272,  271,  274,  340,  339,  342,  343,  347,
  348,  392,  391,  354,  355,  362,  361,
);
@yydgoto = (                                              2,
    3,    7,    6,  171,  242,   62,   63,   64,  175,   65,
  315,   66,  316,   67,  317,   68,  318,   69,  319,   70,
  320,   71,   72,   73,   74,   75,  325,   76,   77,  327,
   78,  328,   79,  329,   80,  330,   81,   82,  332,   83,
  333,   84,  334,   85,   86,  336,   87,  337,   88,   89,
   90,   91,   92,   93,   94,   95,  345,   96,   97,  347,
   98,  348,   99,  349,  100,  350,  101,  351,  102,  103,
  104,  105,  355,  106,  107,  108,  358,  109,  359,  110,
  360,  111,  361,  112,  362,  113,  363,  114,  364,  115,
  365,  313,  462,  428,  429,  448,  479,  463,  548,  483,
  491,  492,  512,  526,  527,  533,  539,  564,  572,  629,
  589,  593,  410,  605,  620,  634,  639,  644,  656,  661,
  441,  501,  651,
);
@yysindex = (                                          -263,
  -57,    0,    0,    0,    0, -411, 5039,  -29,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -57,    0,
  -57,    0,    0,    0,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,    0, -346, -345, -164, -344,
 -343, -341, -340, -339, -338, -337, -336, -328, -326, -325,
 -324, -323, -322, -321, -320, -318, -317, -316, -315, -314,
 -313, -312, -310, -309, -307, -306, -305, -304, -300, -299,
 -298, -297, -296, -294, -293, -291, -287, -285, -284, -283,
 -282, -281, -280, -279, -275, -272, -271, -270, -268, -267,
  -32,    2,   59,  -57,    0,   60,   61,   62,   63,   64,
   65,   67,   69,   70,   72,   75,   76,   91,   93,   94,
   95,   96,   97,   98,   99,  103,  109,  110,  112,  113,
  114,  115,  117,  118,  121,  124,  125,  126,  127,  128,
  129,  130,  140,  141,  142,  144,  145,  146,  148,  150,
  153,  155,  157,  158,  161,  162,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
    0,    0,    0, -161,    0, -160,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -159, -158, -154,
 -153, -151, -150, -147, -146, -145, -144, -143, -142, -141,
 -140,    0, 4764,    0, 3832,  347, 2145, 4819, 4320,  616,
  719,  822,  925, 1028, 2275, 2378, 4874, 3776, 3372, 2790,
 1131, 3891, 2907, 4150, 4214, 4375, 3475, 1234, 1337, 1440,
 1543, 1646, 1749, 1852, 3578, 1955, 4001,  475, 4709, 2971,
 3035, 3103, 3206, 3262, 2481, 2584, 2687, 4051, 3677, 4474,
 4529, 4929, 4584, 4654, 2077,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,    0,    0,  -57,  -57,  -57,  -57,    0,    0,    0,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,    0,    0,    0,    0,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,    0,    0,
    0,    0,    0,  -57,  -57,    0,    0,    0,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
    0,    0,    0,    0,    0,    0,    0,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,    0,    0,    0,    0,
    0,    0,    0,  -57,  -57,  -57,  -57,  -57,    0,    0,
    0,    0,  -57,  -57,  -57,  -57,  -57,  -57,    0,    0,
    0,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,    0,
    0,    0,    0,    0,    0,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,    0,    0,    0,    0,  -57,  -57,  -57,
    0,    0,    0,    0,  -57,  -57,    0,    0,    0,  -57,
  -57,  -57,  -57,  -57,  -57,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -57,  -57,  -57,  -57,  -57,
  -57,    0,    0,    0,    0,  -57,  -57,  -57,  -57,    0,
    0,    0,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,    0,    0,    0,  -57,
    0,    0,    0,    0,    0,  -57,  -57,  -57,  -57,  -57,
  -57,  -57,    0,    0,    0,    0,    0,    0,  -57,  -57,
  -57,  -57,  -57,  -57,  -57,  -57,  -57,    0,    0,    0,
    0,    0,  -57,  -57,  -57,  -57,    0,    0,    0,  -57,
  -57,    0,    0,    0,  -57,  -57,    0,    0,    0,  -57,
  -57,    0,    0,    0,    0,    0,  -57,  -57,    0,    0,
    0,  -57,  -57,    0,    0,    0,  -57,  -57,    0,    0,
    0, -139, -138, -137, -135, -134, -132, -131, -130, -129,
 -128, -127, -126, -125, -124, -123, -122, -121, -120, -119,
 -118, -117, -116, -115, -114, -113, -112, -111, -110, -109,
 -108, -107, -106, -104, -103, -102, -101,  -99,  -98,  -97,
  -96,  -73,  -67,  -66,  -65,  -49,  -48,  -47,  -36,  -35,
  -34,  -33,  -28,  -27,  -14,  -13,  -12,  -11,  -10,   -9,
   -8,    3,    4,    5,    6,    7,    8,   14,   15,   16,
   17,   25,   26,   35,   36,   37,   38,   39,   40,   49,
   50,   51,   52,   56,   57,   58,   71,   73,   74,   77,
   78,   79,   80,   87,   88,   89,   90,  116,  119,  120,
  131,  132,  133,  143,  147,  154,  159,  163,  164,  167,
  168,  169,  170,  171,  174,  175,  176,  179,  180,  181,
  184,  185,  186,  187,  192,  193,  196,  197,  200,  201,
  202,  203,  204,  205,  206,  208,  209,  211,  213,  214,
  215,  216,  218,  219,  220,  221,  222,  223,  224,  225,
  226,  227,  229,  230,  231,  233,  234,  235,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
);
@yyrindex = (                                             0,
    0,    0,    0,    0,    0,    0,  384,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
);
@yygindex = (                                             0,
    0,  411,  -59,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -189,    0,    0,    0,    0,    0,  253,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  212,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -227,    0,    0,
    0,    0, -220,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5151,    0,    0,    0,    0,    0,    0,    0,
    0,  156,  165,    0,  178,    0,    0,    0,    0,  210,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
);
$YYTABLESIZE=5516;
@yytable = (                                            117,
    4,  118,    1,    5,    8,  120,  121,  122,  123,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,
  165,  166,  167,  168,  169,  170,  352,  353,  354,    4,
  241,  116,    5,  321,  322,  323,  324,  356,  357,  172,
  173,  176,  177,  331,  178,  179,  180,  181,  182,  183,
  338,  339,  340,  341,  342,  343,  344,  184,  346,  185,
  186,  187,  188,  189,  190,  191,    9,  192,  193,  194,
  195,  196,  197,  198,   10,  199,  200,   11,  201,  202,
  203,  204,  244,   12,  246,  205,  206,  207,  208,  209,
   13,  210,  211,   14,  212,   15,   16,   17,  213,  174,
  214,  215,  216,  217,  218,  219,  220,   18,   19,   20,
  221,   21,   22,  222,  223,  224,   23,  225,  226,  245,
  247,  248,  249,  250,  251,  252,   24,  253,   25,  254,
  255,   26,  256,   27,   28,  257,  258,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  259,   29,  260,  261,  262,  263,  264,  265,  266,
   30,   31,   32,  267,   33,   34,   35,   36,   37,  268,
  269,   38,  270,  271,  272,  273,   39,  274,  275,   40,
   41,  276,   42,   43,  277,  278,  279,  280,  281,  282,
  283,   44,   45,   46,   47,   48,   49,   50,   51,   52,
  284,  285,  286,   53,  287,  288,  289,  227,  290,   54,
  291,   55,   56,  292,   57,  293,  228,  294,  295,   58,
  229,  296,  297,   59,  312,  314,  366,  367,   60,   61,
  230,  368,  369,  231,  370,  371,  232,  233,  372,  373,
  374,  375,  376,  377,  378,  379,  830,  831,  832,  234,
  833,  834,  235,  835,  836,  837,  838,  839,  840,  841,
  842,  843,  844,  845,  846,  847,  848,  849,  850,  851,
  852,  853,  854,  855,  856,  857,  858,  859,  860,  861,
  236,  862,  863,  864,  865,  237,  866,  867,  868,  869,
  662,  663,  664,  665,  666,  667,  668,  669,  670,  671,
  672,  673,  674,  675,  676,  677,  678,  679,  680,  681,
  682,  683,  870,  238,  684,  685,  686,  687,  871,  872,
  873,  688,  689,  690,  691,  692,  693,  694,  695,  696,
  697,  698,  699,  700,  701,  702,  874,  875,  876,  239,
  703,  704,  705,  706,  707,  708,  709,  710,  711,  877,
  878,  879,  880,    1,  712,  713,  240,  881,  882,  714,
  715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
  725,  883,  884,  885,  886,  887,  888,  889,  726,  727,
  728,  729,  730,  731,  732,  733,  734,  243,  890,  891,
  892,  893,  894,  895,  735,  736,  737,  738,  739,  896,
  897,  898,  899,  740,  741,  742,  743,  744,  745,  426,
  900,  901,  746,  747,  748,  749,  750,  751,  752,  753,
  902,  903,  904,  905,  906,  907,  754,  755,  756,  757,
  758,  759,  760,  761,  908,  909,  910,  911,  762,  763,
  764,  912,  913,  914,  119,  765,  766,    0,  335,    0,
  767,  768,  769,  770,  771,  772,  915,  515,  916,  917,
    0,    0,  918,  919,  920,  921,  773,  774,  775,  776,
  777,  778,  922,  923,  924,  925,  779,  780,  781,  782,
  326,    0,    0,  783,  784,  785,  786,  787,  788,  789,
  790,  791,  792,  793,  794,  795,  796,  595,    0,  660,
  797,  926,    0,    0,  927,  928,  798,  799,  800,  801,
  802,  803,  804,    0,    0,    0,  929,  930,  931,  805,
  806,  807,  808,  809,  810,  811,  812,  813,  932,    0,
    0,    0,  933,  814,  815,  816,  817,  587,  633,  934,
  818,  819,    0,    0,  935,  820,  821,    0,  936,  937,
  822,  823,  938,  939,  940,  941,  942,  824,  825,  943,
  944,  945,  826,  827,  946,  947,  948,  828,  829,  949,
  950,  951,  952,  380,  411,  412,  413,  953,  954,  414,
  415,  955,  956,  416,  417,  957,  958,  959,  960,  961,
  962,  963,  381,  964,  965,  382,  966,  383,  967,  968,
  969,  970,  384,  971,  972,  973,  974,  975,  976,  977,
  978,  979,  980,  385,  981,  982,  983,  386,  984,  985,
  986,  987,  988,  989,  990,  991,  992,  993,  994,  995,
  996,  997,    0,    0,    0,  387,    0,    0,  388,    0,
  389,    0,    0,    0,    0,    0,    0,    0,    0,  418,
    0,    0,  419,    0,    0,  390,    0,  420,  421,    0,
    0,  422,  423,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  391,    0,    0,    0,  461,    0,
  392,    0,    0,    0,    0,    0,  393,    0,    0,  394,
    0,    0,  395,    0,    0,    0,    0,    0,    0,    0,
    0,  380,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  396,    0,  397,    0,    0,    0,  424,
  381,  398,    0,  382,    0,  383,  399,    0,  425,    0,
  384,  400,    0,    0,    0,    0,    0,    0,    0,    0,
  401,  385,    0,    0,    0,  386,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  387,    0,    0,  388,    0,  389,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  464,  573,  390,    0,  574,  575,    0,    0,  576,
  577,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  391,    0,    0,    0,    0,    0,  392,    0,
    0,    0,    0,  578,  393,    0,    0,  394,    0,    0,
  395,    0,    0,  579,  580,  581,  582,  583,  584,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  396,  380,  397,    0,    0,    0,  585,    0,  398,
  449,    0,    0,    0,  399,    0,  586,    0,    0,  400,
  450,  381,    0,    0,  382,    0,  383,  451,  401,    0,
    0,  384,    0,    0,  452,    0,    0,    0,    0,    0,
    0,    0,  385,  453,  465,    0,  386,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  387,    0,    0,  388,    0,  389,
  454,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  390,    0,    0,  455,    0,    0,
  456,  457,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  391,    0,  380,    0,    0,    0,  392,
    0,    0,    0,  449,    0,  393,    0,    0,  394,    0,
    0,  395,    0,  450,  381,    0,    0,  382,    0,  383,
  451,    0,    0,    0,  384,    0,    0,  452,    0,    0,
    0,  458,  396,    0,  397,  385,  453,  466,    0,  386,
  398,    0,    0,    0,    0,  399,  459,  460,    0,    0,
  400,    0,    0,    0,    0,    0,    0,  387,    0,  401,
  388,    0,  389,  454,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  390,    0,    0,
  455,    0,    0,  456,  457,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  391,    0,  380,    0,
    0,    0,  392,    0,    0,    0,  449,    0,  393,    0,
    0,  394,    0,    0,  395,    0,  450,  381,    0,    0,
  382,    0,  383,  451,    0,    0,    0,  384,    0,    0,
  452,    0,    0,    0,  458,  396,    0,  397,  385,  453,
  467,    0,  386,  398,    0,    0,    0,    0,  399,  459,
  460,    0,    0,  400,    0,    0,    0,    0,    0,    0,
  387,    0,  401,  388,    0,  389,  454,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,    0,    0,  455,    0,    0,  456,  457,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  391,
    0,  380,    0,    0,    0,  392,    0,    0,    0,  449,
    0,  393,    0,    0,  394,    0,    0,  395,    0,  450,
  381,    0,    0,  382,    0,  383,  451,    0,    0,    0,
  384,    0,    0,  452,    0,    0,    0,  458,  396,    0,
  397,  385,  453,  513,    0,  386,  398,    0,    0,    0,
    0,  399,  459,  460,    0,    0,  400,    0,    0,    0,
    0,    0,    0,  387,    0,  401,  388,    0,  389,  454,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  390,    0,    0,  455,    0,    0,  456,
  457,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  391,    0,  380,    0,    0,    0,  392,    0,
    0,    0,  449,    0,  393,    0,    0,  394,    0,    0,
  395,    0,  450,  381,    0,    0,  382,    0,  383,  451,
    0,    0,    0,  384,    0,    0,  452,    0,    0,    0,
  458,  396,    0,  397,  385,  453,  549,    0,  386,  398,
    0,    0,    0,    0,  399,  459,  460,    0,    0,  400,
    0,    0,    0,    0,    0,    0,  387,    0,  401,  388,
    0,  389,  454,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  390,    0,    0,  455,
    0,    0,  456,  457,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  391,    0,  380,    0,    0,
    0,  392,    0,    0,    0,  449,    0,  393,    0,    0,
  394,    0,    0,  395,    0,  450,  381,    0,    0,  382,
    0,  383,  451,    0,    0,    0,  384,    0,    0,  452,
    0,    0,    0,  458,  396,    0,  397,  385,  453,  550,
    0,  386,  398,    0,    0,    0,    0,  399,  459,  460,
    0,    0,  400,    0,    0,    0,    0,    0,    0,  387,
    0,  401,  388,    0,  389,  454,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  390,
    0,    0,  455,    0,    0,  456,  457,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  391,    0,
  380,    0,    0,    0,  392,    0,    0,    0,  449,    0,
  393,    0,    0,  394,    0,    0,  395,    0,  450,  381,
    0,    0,  382,    0,  383,  451,    0,    0,    0,  384,
    0,    0,  452,    0,    0,    0,  458,  396,    0,  397,
  385,  453,  551,    0,  386,  398,    0,    0,    0,    0,
  399,  459,  460,    0,    0,  400,    0,    0,    0,    0,
    0,    0,  387,    0,  401,  388,    0,  389,  454,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  390,    0,    0,  455,    0,    0,  456,  457,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  391,    0,  380,    0,    0,    0,  392,    0,    0,
    0,  449,    0,  393,    0,    0,  394,    0,    0,  395,
    0,  450,  381,    0,    0,  382,    0,  383,  451,    0,
    0,    0,  384,    0,    0,  452,    0,    0,    0,  458,
  396,    0,  397,  385,  453,  552,    0,  386,  398,    0,
    0,    0,    0,  399,  459,  460,    0,    0,  400,    0,
    0,    0,    0,    0,    0,  387,    0,  401,  388,    0,
  389,  454,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  390,    0,    0,  455,    0,
    0,  456,  457,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  391,    0,  380,    0,    0,    0,
  392,    0,    0,    0,  449,    0,  393,    0,    0,  394,
    0,    0,  395,    0,  450,  381,    0,    0,  382,    0,
  383,  451,    0,    0,    0,  384,    0,    0,  452,    0,
    0,    0,  458,  396,    0,  397,  385,  453,  553,    0,
  386,  398,    0,    0,    0,    0,  399,  459,  460,    0,
    0,  400,    0,    0,    0,    0,    0,    0,  387,    0,
  401,  388,    0,  389,  454,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  390,    0,
    0,  455,    0,    0,  456,  457,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  391,    0,  380,
    0,    0,    0,  392,    0,    0,    0,  449,    0,  393,
    0,    0,  394,    0,    0,  395,    0,  450,  381,    0,
    0,  382,    0,  383,  451,    0,    0,    0,  384,    0,
    0,  452,    0,    0,    0,  458,  396,    0,  397,  385,
  453,  554,    0,  386,  398,    0,    0,    0,    0,  399,
  459,  460,    0,    0,  400,    0,    0,    0,    0,    0,
    0,  387,    0,  401,  388,    0,  389,  454,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  390,    0,    0,  455,    0,    0,  456,  457,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  391,    0,  380,    0,    0,    0,  392,    0,    0,    0,
  449,    0,  393,    0,    0,  394,    0,    0,  395,    0,
  450,  381,    0,    0,  382,    0,  383,  451,    0,    0,
    0,  384,    0,    0,  452,    0,    0,    0,  458,  396,
    0,  397,  385,  453,  555,    0,  386,  398,    0,    0,
    0,    0,  399,  459,  460,    0,    0,  400,    0,    0,
    0,    0,    0,    0,  387,    0,  401,  388,    0,  389,
  454,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  390,    0,    0,  455,    0,    0,
  456,  457,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  391,    0,  380,    0,    0,    0,  392,
    0,    0,    0,  449,    0,  393,    0,    0,  394,    0,
    0,  395,    0,  450,  381,    0,    0,  382,    0,  383,
  451,    0,    0,    0,  384,    0,    0,  452,    0,    0,
    0,  458,  396,    0,  397,  385,  453,  565,    0,  386,
  398,    0,    0,    0,    0,  399,  459,  460,    0,    0,
  400,    0,    0,    0,    0,    0,    0,  387,    0,  401,
  388,    0,  389,  454,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  390,    0,    0,
  455,    0,    0,  456,  457,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  391,    0,  380,    0,
    0,    0,  392,    0,    0,    0,  449,    0,  393,    0,
    0,  394,    0,    0,  395,    0,  450,  381,    0,    0,
  382,    0,  383,  451,    0,    0,    0,  384,    0,    0,
  452,    0,    0,    0,  458,  396,    0,  397,  385,  453,
    0,    0,  386,  398,    0,    0,    0,    0,  399,  459,
  460,    0,    0,  400,    0,    0,    0,    0,    0,  659,
  387,    0,  401,  388,    0,  389,  454,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,    0,    0,  455,    0,    0,  456,  457,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  391,
    0,  380,    0,    0,    0,  392,    0,    0,    0,  449,
    0,  393,    0,    0,  394,    0,    0,  395,    0,  450,
  381,    0,    0,  382,    0,  383,  451,  439,    0,    0,
  384,    0,    0,  452,    0,    0,    0,  458,  396,    0,
  397,  385,  453,    0,    0,  386,  398,    0,    0,    0,
    0,  399,  459,  460,    0,    0,  400,    0,    0,    0,
    0,    0,    0,  387,    0,  401,  388,    0,  389,  454,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  390,    0,    0,  455,    0,    0,  456,
  457,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  391,    0,    0,    0,    0,    0,  392,    0,
    0,    0,    0,    0,  393,    0,    0,  394,    0,    0,
  395,    0,    0,  380,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  458,  396,  381,  397,    0,  382,    0,  383,    0,  398,
    0,    0,  384,    0,  399,  459,  460,  477,    0,  400,
    0,    0,    0,  385,    0,    0,    0,  386,  401,    0,
    0,    0,    0,    0,  502,    0,  657,    0,    0,  503,
  504,    0,  505,  506,    0,  387,    0,    0,  388,    0,
  389,  380,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  390,    0,  658,    0,    0,
  381,  507,  508,  382,    0,  383,    0,    0,    0,    0,
  384,    0,    0,    0,  391,    0,    0,    0,    0,    0,
  392,  385,    0,    0,    0,  386,  393,    0,    0,  394,
    0,    0,  395,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  387,  430,    0,  388,    0,  389,    0,
  480,    0,    0,  396,  431,  397,    0,    0,  432,    0,
    0,  398,    0,  390,    0,    0,  399,    0,  509,    0,
    0,  400,    0,    0,    0,    0,    0,    0,    0,    0,
  401,    0,  391,    0,    0,    0,    0,    0,  392,    0,
    0,    0,    0,  433,  393,    0,    0,  394,    0,    0,
  395,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  380,    0,    0,    0,    0,    0,    0,    0,    0,
  434,  396,    0,  397,  435,  436,    0,    0,    0,  398,
  381,    0,  437,  382,  399,  383,    0,    0,    0,  400,
  384,    0,    0,    0,    0,  438,    0,    0,  401,  468,
    0,  385,  469,  618,    0,  386,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  387,    0,    0,  388,    0,  389,    0,
    0,    0,    0,    0,    0,    0,  470,    0,    0,    0,
    0,    0,    0,  390,    0,    0,  471,    0,    0,  472,
  473,    0,    0,    0,    0,  474,  475,    0,    0,    0,
    0,    0,  391,    0,  380,    0,    0,    0,  392,    0,
    0,    0,    0,    0,  393,    0,    0,  394,    0,    0,
  395,    0,    0,  381,    0,    0,  382,    0,  383,    0,
    0,    0,    0,  384,    0,    0,    0,    0,    0,    0,
    0,  396,  468,  397,  385,  469,  621,    0,  386,  398,
    0,    0,    0,    0,  399,    0,  476,    0,    0,  400,
    0,    0,    0,    0,    0,    0,  387,    0,  401,  388,
    0,  389,    0,    0,    0,    0,    0,    0,    0,  470,
    0,    0,    0,    0,    0,    0,  390,    0,    0,  471,
    0,    0,  472,  473,    0,    0,    0,    0,  474,  475,
    0,    0,    0,    0,    0,  391,    0,  380,    0,    0,
    0,  392,  609,    0,    0,    0,    0,  393,    0,    0,
  394,    0,    0,  395,    0,    0,  381,    0,    0,  382,
    0,  383,    0,    0,    0,    0,  384,    0,    0,    0,
    0,    0,    0,    0,  396,    0,  397,  385,  610,  622,
    0,  386,  398,  611,    0,    0,    0,  399,    0,  476,
    0,    0,  400,    0,    0,    0,    0,    0,    0,  387,
    0,  401,  388,    0,  389,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  390,
    0,    0,  612,    0,    0,  613,  614,    0,    0,    0,
    0,    0,    0,  615,  616,    0,    0,    0,  391,    0,
  380,    0,    0,    0,  392,  609,    0,    0,    0,    0,
  393,    0,    0,  394,    0,    0,  395,    0,    0,  381,
    0,    0,  382,    0,  383,    0,    0,    0,    0,  384,
    0,    0,    0,    0,    0,    0,    0,  396,    0,  397,
  385,  610,  510,    0,  386,  398,  611,    0,    0,    0,
  399,    0,  617,    0,    0,  400,    0,    0,    0,    0,
    0,    0,  387,    0,  401,  388,    0,  389,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  390,    0,    0,  612,    0,    0,  613,  614,
    0,    0,    0,    0,    0,    0,  615,  616,    0,    0,
    0,  391,    0,  380,    0,    0,    0,  392,  609,    0,
    0,    0,    0,  393,    0,    0,  394,    0,    0,  395,
    0,    0,  381,    0,    0,  382,    0,  383,    0,    0,
    0,    0,  384,    0,    0,    0,    0,    0,    0,    0,
  396,    0,  397,  385,  610,    0,    0,  386,  398,  611,
    0,    0,    0,  399,    0,  617,    0,    0,  400,  524,
    0,    0,    0,    0,    0,  387,    0,  401,  388,    0,
  389,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  390,    0,    0,  612,    0,
    0,  613,  614,    0,    0,    0,    0,    0,    0,  615,
  616,    0,    0,    0,  391,    0,  380,    0,    0,    0,
  392,    0,    0,    0,    0,    0,  393,    0,    0,  394,
    0,    0,  395,  594,    0,  381,    0,    0,  382,    0,
  383,    0,    0,    0,    0,  384,    0,    0,    0,    0,
    0,    0,    0,  396,    0,  397,  385,    0,    0,    0,
  386,  398,    0,    0,    0,    0,  399,  502,  617,    0,
    0,  400,  503,  504,    0,  505,  506,    0,  387,    0,
  401,  388,    0,  389,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  603,  390,    0,
    0,    0,    0,    0,  507,  508,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  391,    0,    0,
    0,    0,    0,  392,    0,    0,    0,    0,    0,  393,
    0,    0,  394,  380,    0,  395,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  516,
  517,    0,  381,  518,    0,  382,  396,  383,  397,    0,
    0,    0,  384,  519,  398,  606,    0,    0,    0,  399,
    0,  509,    0,  385,  400,    0,    0,  386,    0,    0,
    0,    0,    0,  401,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  520,  387,    0,  380,  388,    0,
  389,    0,    0,    0,    0,    0,  521,    0,    0,    0,
  522,    0,    0,  516,  517,  390,  381,  518,    0,  382,
    0,  383,    0,    0,    0,    0,  384,  519,    0,    0,
    0,    0,    0,    0,  391,    0,    0,  385,    0,    0,
  392,  386,    0,    0,    0,    0,  393,    0,    0,  394,
    0,    0,  395,    0,    0,    0,    0,    0,  520,  387,
    0,  380,  388,    0,  389,    0,  596,    0,  607,    0,
  521,    0,    0,  396,  522,  397,    0,    0,    0,  390,
  381,  398,    0,  382,    0,  383,  399,    0,    0,    0,
  384,  400,    0,  523,    0,    0,    0,    0,  391,  597,
  401,  385,    0,    0,  392,  386,    0,  598,    0,    0,
  393,    0,    0,  394,    0,    0,  395,    0,    0,    0,
    0,    0,    0,  387,  608,    0,  388,    0,  389,  380,
    0,    0,    0,    0,  596,    0,    0,  396,    0,  397,
  599,    0,    0,  390,    0,  398,    0,    0,  381,  600,
  399,  382,    0,  383,    0,  400,    0,  523,  384,    0,
    0,    0,  391,    0,  401,    0,    0,  597,  392,  385,
    0,    0,    0,  386,  393,  598,    0,  394,    0,    0,
  395,    0,    0,    0,    0,    0,    0,    0,    0,  601,
    0,  387,    0,    0,  388,    0,  389,    0,    0,    0,
    0,  396,    0,  397,    0,    0,    0,    0,  599,  398,
    0,  390,    0,    0,  399,    0,  602,  600,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,  401,    0,
  391,    0,  380,    0,  499,    0,  392,  596,    0,    0,
    0,    0,  393,    0,    0,  394,    0,    0,  395,    0,
    0,  381,    0,    0,  382,    0,  383,  601,    0,    0,
    0,  384,    0,    0,    0,    0,    0,    0,    0,  396,
  597,  397,  385,    0,    0,    0,  386,  398,  598,    0,
    0,    0,  399,    0,  602,    0,    0,  400,  380,    0,
    0,    0,    0,  596,  387,    0,  401,  388,    0,  389,
    0,    0,    0,    0,    0,    0,    0,  381,    0,    0,
  382,  599,  383,    0,  390,    0,    0,  384,    0,    0,
  600,    0,    0,    0,    0,    0,  597,    0,  385,    0,
    0,    0,  386,  391,  598,    0,    0,  546,    0,  392,
    0,    0,    0,    0,    0,  393,    0,    0,  394,    0,
  387,  395,    0,  388,    0,  389,    0,    0,    0,    0,
  601,    0,    0,    0,    0,    0,    0,  599,    0,    0,
  390,    0,  396,    0,  397,    0,  600,    0,    0,    0,
  398,    0,    0,    0,    0,  399,    0,  602,    0,  391,
  400,    0,    0,    0,    0,  392,    0,    0,  380,  401,
    0,  393,    0,    0,  394,    0,    0,  395,    0,    0,
    0,    0,    0,    0,    0,    0,  601,  381,    0,    0,
  382,  493,  383,    0,    0,    0,    0,  384,  396,    0,
  397,    0,    0,    0,    0,    0,  398,    0,  385,    0,
  562,  399,  386,  602,    0,    0,  400,    0,    0,    0,
  494,    0,    0,    0,    0,  401,    0,    0,    0,    0,
  387,    0,    0,  388,    0,  389,  495,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,    0,    0,    0,    0,    0,  496,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  391,
    0,  380,    0,    0,    0,  392,    0,    0,    0,    0,
    0,  393,    0,    0,  394,    0,    0,  395,    0,    0,
  381,    0,    0,  382,    0,  383,    0,    0,    0,    0,
  384,    0,    0,    0,    0,    0,    0,  497,  396,  632,
  397,  385,  540,    0,    0,  386,  398,    0,    0,    0,
    0,  399,    0,    0,    0,    0,  400,    0,    0,    0,
    0,  498,    0,  387,    0,  401,  388,    0,  389,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  390,    0,    0,  541,    0,    0,  542,
  543,    0,    0,  544,  545,    0,    0,    0,    0,    0,
    0,    0,  391,    0,  380,    0,    0,    0,  392,    0,
    0,    0,    0,    0,  393,    0,    0,  394,    0,    0,
  395,    0,    0,  381,    0,    0,  382,    0,  383,    0,
    0,    0,    0,  384,    0,    0,    0,    0,  489,    0,
    0,  396,    0,  397,  385,    0,    0,    0,  386,  398,
    0,    0,    0,    0,  399,    0,    0,    0,    0,  400,
    0,    0,    0,    0,    0,    0,  387,    0,  401,  388,
    0,  389,    0,    0,  556,    0,    0,    0,  557,    0,
    0,    0,  558,    0,    0,    0,  390,    0,    0,    0,
    0,    0,    0,    0,  408,    0,    0,    0,    0,    0,
    0,    0,    0,  380,    0,  391,    0,    0,    0,    0,
    0,  392,    0,    0,  559,    0,    0,  393,    0,    0,
  394,    0,  381,  395,    0,  382,    0,  383,    0,    0,
    0,    0,  384,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  385,  396,    0,  397,  386,    0,    0,
    0,    0,  398,  514,    0,    0,    0,  399,    0,  560,
  561,    0,  400,    0,    0,  387,    0,    0,  388,    0,
  389,  401,    0,  623,    0,    0,    0,  624,    0,    0,
    0,  625,    0,    0,    0,  390,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  380,    0,  391,    0,    0,    0,    0,    0,
  392,  630,    0,    0,    0,    0,  393,    0,    0,  394,
    0,  381,  395,    0,  382,    0,  383,    0,    0,    0,
    0,  384,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  385,  396,    0,  397,  386,    0,    0,    0,
    0,  398,    0,    0,    0,    0,  399,    0,  380,  626,
    0,  400,    0,  570,  387,  484,    0,  388,  631,  389,
  401,    0,  404,    0,    0,  485,    0,  381,    0,  486,
  382,    0,  383,    0,  390,    0,    0,  384,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  385,    0,
    0,    0,  386,  391,    0,    0,  405,    0,    0,  392,
    0,    0,    0,  627,  487,  393,    0,  380,  394,    0,
  387,  395,    0,  388,    0,  389,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  381,    0,    0,  382,
  390,  383,  396,    0,  397,    0,  384,    0,    0,    0,
  398,    0,    0,    0,    0,  399,    0,  385,    0,  391,
  400,  386,    0,    0,    0,  392,  488,    0,    0,  401,
    0,  393,    0,    0,  394,    0,    0,  395,    0,  387,
  484,    0,  388,    0,  389,    0,    0,    0,    0,    0,
  485,    0,    0,    0,  486,    0,  406,    0,  396,  390,
  397,    0,    0,    0,    0,    0,  398,    0,    0,    0,
    0,  399,  531,  407,    0,    0,  400,    0,  391,    0,
    0,    0,    0,    0,  392,  401,    0,  380,    0,    0,
  393,    0,    0,  394,    0,    0,  395,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  381,    0,    0,  382,
    0,  383,    0,    0,    0,    0,  384,  396,    0,  397,
    0,    0,    0,    0,    0,  398,    0,  385,    0,    0,
  399,  386,    0,    0,    0,  400,  534,  380,    0,    0,
    0,  488,    0,    0,  401,    0,    0,    0,    0,  387,
    0,    0,  388,    0,  389,    0,  381,    0,    0,  382,
  566,  383,    0,    0,  567,    0,  384,  568,    0,  390,
    0,    0,    0,    0,    0,    0,    0,  385,    0,    0,
    0,  386,    0,    0,    0,    0,    0,    0,  391,    0,
    0,    0,    0,    0,  392,    0,    0,    0,    0,  387,
  393,    0,  388,  394,  389,    0,  395,  623,    0,    0,
    0,  624,    0,    0,    0,  625,    0,    0,    0,  390,
    0,    0,    0,    0,    0,    0,  569,  396,    0,  397,
    0,    0,    0,    0,    0,  398,  380,    0,  391,    0,
  399,    0,  446,    0,  392,  400,    0,    0,    0,    0,
  393,    0,    0,  394,  401,  381,  395,    0,  382,    0,
  383,    0,    0,    0,    0,  384,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  385,  396,    0,  397,
  386,    0,    0,    0,    0,  398,    0,    0,    0,    0,
  399,    0,    0,  626,    0,  400,    0,  537,  387,    0,
  380,  388,    0,  389,  401,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  390,  381,
    0,    0,  382,  528,  383,    0,    0,    0,    0,  384,
    0,    0,    0,    0,    0,    0,    0,  391,    0,    0,
  385,    0,    0,  392,  386,    0,    0,  529,    0,  393,
    0,  530,  394,    0,    0,  395,    0,    0,    0,    0,
    0,    0,  387,    0,    0,  388,    0,  389,    0,    0,
    0,    0,    0,    0,    0,    0,  396,    0,  397,    0,
    0,    0,  390,    0,  398,    0,    0,  528,    0,  399,
    0,    0,    0,    0,  400,    0,  637,    0,    0,    0,
    0,  391,    0,  401,    0,    0,  380,  392,    0,    0,
    0,  529,    0,  393,    0,  530,  394,    0,    0,  395,
    0,    0,    0,    0,    0,  381,    0,    0,  382,    0,
  383,    0,    0,    0,    0,  384,    0,    0,    0,    0,
  396,    0,  397,    0,    0,    0,  385,    0,  398,    0,
  386,  642,    0,  399,    0,    0,    0,    0,  400,    0,
    0,  380,    0,    0,    0,    0,    0,  401,  387,    0,
    0,  388,    0,  389,    0,    0,    0,    0,    0,    0,
  381,    0,    0,  382,    0,  383,    0,    0,  390,    0,
  384,  444,    0,    0,  445,    0,    0,    0,    0,  535,
    0,  385,    0,    0,    0,  386,  649,  391,    0,    0,
    0,    0,    0,  392,    0,    0,    0,    0,    0,  393,
    0,    0,  394,  387,    0,  395,  388,    0,  389,    0,
    0,    0,    0,    0,    0,    0,  536,    0,    0,    0,
    0,    0,    0,  390,    0,    0,  396,    0,  397,    0,
    0,    0,    0,    0,  398,    0,    0,    0,    0,  399,
  380,    0,  391,    0,  400,    0,    0,    0,  392,    0,
    0,    0,    0,  401,  393,    0,  654,  394,    0,  381,
  395,    0,  382,    0,  383,    0,    0,    0,    0,  384,
    0,    0,    0,    0,    0,    0,    0,    0,  635,    0,
  385,  396,    0,  397,  386,    0,    0,    0,    0,  398,
    0,    0,    0,    0,  399,  380,    0,    0,    0,  400,
    0,    0,  387,    0,    0,  388,    0,  389,  401,    0,
    0,  591,    0,    0,  381,  636,    0,  382,    0,  383,
    0,    0,  390,    0,  384,    0,    0,    0,    0,    0,
    0,    0,    0,  640,    0,  385,    0,    0,    0,  386,
    0,  391,    0,    0,    0,    0,    0,  392,    0,    0,
  380,    0,    0,  393,    0,    0,  394,  387,    0,  395,
  388,    0,  389,    0,    0,    0,  402,    0,    0,  381,
  641,    0,  382,    0,  383,    0,    0,  390,    0,  384,
  396,    0,  397,    0,    0,    0,    0,    0,  398,    0,
  385,    0,    0,  399,  386,    0,  391,    0,  400,    0,
    0,    0,  392,    0,    0,    0,    0,  401,  393,    0,
    0,  394,  387,    0,  395,  388,    0,  389,    0,    0,
  380,  442,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  390,    0,    0,  396,    0,  397,  647,  381,
    0,    0,  382,  398,  383,    0,    0,    0,  399,  384,
    0,  391,    0,  400,    0,    0,    0,  392,  652,    0,
  385,    0,  401,  393,  386,    0,  394,    0,    0,  395,
    0,    0,    0,    0,    0,  380,  481,    0,    0,    0,
    0,    0,  387,    0,    0,  388,    0,  389,    0,  648,
  396,    0,  397,    0,  381,  653,    0,  382,  398,  383,
    0,    0,  390,  399,  384,    0,    0,    0,  400,    0,
    0,    0,    0,  590,    0,  385,    0,  401,    0,  386,
    0,  391,    0,    0,    0,    0,    0,  392,    0,    0,
  380,  645,    0,  393,    0,    0,  394,  387,    0,  395,
  388,    0,  389,    0,    0,    0,    0,    0,    0,  381,
    0,    0,  382,    0,  383,    0,    0,  390,    0,  384,
  396,    0,  397,    0,    0,    0,    0,    0,  398,    0,
  385,    0,    0,  399,  386,    0,  391,    0,  400,    0,
    0,    0,  392,    0,    0,  380,    0,  401,  393,    0,
    0,  394,  387,    0,  395,  388,    0,  389,    0,    0,
    0,    0,    0,    0,  381,    0,    0,  382,    0,  383,
    0,    0,  390,    0,  384,  396,    0,  397,    0,    0,
    0,    0,    0,  398,    0,  385,    0,    0,  399,  386,
    0,  391,    0,  400,    0,    0,    0,  392,    0,    0,
  380,    0,  401,  393,    0,    0,  394,  387,    0,  395,
  388,    0,  389,    0,    0,    0,    0,    0,    0,  381,
    0,    0,  382,    0,  383,    0,    0,  390,    0,  384,
  396,    0,  397,    0,    0,    0,    0,    0,  398,    0,
  385,    0,    0,  399,  386,    0,  391,    0,  400,    0,
    0,    0,  392,    0,    0,  380,    0,  401,  393,    0,
    0,  394,  387,    0,  395,  388,    0,  389,    0,    0,
    0,    0,    0,    0,  381,    0,    0,  382,    0,  383,
    0,    0,  390,    0,  384,  396,    0,  397,    0,    0,
    0,    0,    0,  398,    0,  385,    0,    0,  399,  386,
    0,  391,    0,  400,    0,    0,    0,  392,    0,    0,
    0,    0,  401,  393,    0,    0,  394,  387,    0,  395,
  388,    0,  389,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  390,    0,    0,
  396,    0,  397,    0,    0,    0,    0,    0,  398,    0,
    0,    0,    0,  399,    0,    0,  391,    0,  400,    0,
    0,    0,  392,    0,    0,    0,    0,  401,  393,    9,
    0,  394,    0,    0,  395,    0,    0,   10,    0,    0,
   11,    0,    0,    0,    0,    0,   12,    0,    0,    0,
    0,    0,    0,   13,    0,  396,   14,  397,   15,   16,
   17,    0,    0,  398,    0,    0,    0,    0,  399,    0,
   18,   19,   20,  400,   21,   22,    0,    0,    0,   23,
    0,    0,  401,    0,    0,    0,    0,    0,    0,   24,
    0,   25,    0,    0,   26,    0,   27,   28,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,   30,   31,   32,    0,   33,   34,   35,
   36,   37,    0,    0,   38,    0,    0,    0,    0,   39,
    0,    0,   40,   41,    0,   42,   43,    0,    0,    0,
    0,    0,    0,    0,   44,   45,   46,   47,   48,   49,
   50,   51,   52,    0,    0,    0,   53,    0,    0,    0,
    0,    0,   54,    0,   55,   56,    0,   57,    0,    0,
    0,    0,   58,    0,    0,    0,   59,    0,    0,    0,
    0,   60,   61,  403,    0,  409,  427,  440,  443,  447,
    0,    0,    0,    0,    0,  478,  478,  482,  490,  500,
  511,    0,  490,  525,  532,  532,  538,  547,    0,    0,
    0,    0,    0,    0,    0,  563,    0,  571,  588,  592,
  525,  604,  604,  604,  604,  619,  619,  619,  628,  628,
  638,  643,  646,  650,  655,  511,
);
@yycheck = (                                             59,
   58,   61,  266,   61,  416,   65,   66,   67,   68,   69,
   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
  110,  111,  112,  113,  114,  115,  284,  285,  286,   58,
   93,   91,   61,  253,  254,  255,  256,  288,  289,  416,
  416,  416,  416,  263,  416,  416,  416,  416,  416,  416,
  270,  271,  272,  273,  274,  275,  276,  416,  278,  416,
  416,  416,  416,  416,  416,  416,  261,  416,  416,  416,
  416,  416,  416,  416,  269,  416,  416,  272,  416,  416,
  416,  416,  172,  278,  174,  416,  416,  416,  416,  416,
  285,  416,  416,  288,  416,  290,  291,  292,  416,  294,
  416,  416,  416,  416,  416,  416,  416,  302,  303,  304,
  416,  306,  307,  416,  416,  416,  311,  416,  416,   91,
   91,   91,   91,   91,   91,   91,  321,   91,  323,   91,
   91,  326,   91,  328,  329,   91,   91,  227,  228,  229,
  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,   91,  347,   91,   91,   91,   91,   91,   91,   91,
  355,  356,  357,   91,  359,  360,  361,  362,  363,   91,
   91,  366,   91,   91,   91,   91,  371,   91,   91,  374,
  375,   91,  377,  378,   91,   91,   91,   91,   91,   91,
   91,  386,  387,  388,  389,  390,  391,  392,  393,  394,
   91,   91,   91,  398,   91,   91,   91,  270,   91,  404,
   91,  406,  407,   91,  409,   91,  279,   91,   91,  414,
  283,   91,   91,  418,  416,  416,  416,  416,  423,  424,
  293,  416,  416,  296,  416,  416,  299,  300,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  312,
  416,  416,  315,  416,  416,  416,  416,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
  343,  416,  416,  416,  416,  348,  416,  416,  416,  416,
  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  416,  376,  404,  405,  406,  407,  416,  416,
  416,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  416,  416,  416,  402,
  430,  431,  432,  433,  434,  435,  436,  437,  438,  416,
  416,  416,  416,    0,  444,  445,  419,  416,  416,  449,
  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
  460,  416,  416,  416,  416,  416,  416,  416,  468,  469,
  470,  471,  472,  473,  474,  475,  476,  416,  416,  416,
  416,  416,  416,  416,  484,  485,  486,  487,  488,  416,
  416,  416,  416,  493,  494,  495,  496,  497,  498,   93,
  416,  416,  502,  503,  504,  505,  506,  507,  508,  509,
  416,  416,  416,  416,  416,  416,  516,  517,  518,  519,
  520,  521,  522,  523,  416,  416,  416,  416,  528,  529,
  530,  416,  416,  416,   64,  535,  536,   -1,  267,   -1,
  540,  541,  542,  543,  544,  545,  416,  332,  416,  416,
   -1,   -1,  416,  416,  416,  416,  556,  557,  558,  559,
  560,  561,  416,  416,  416,  416,  566,  567,  568,  569,
  258,   -1,   -1,  573,  574,  575,  576,  577,  578,  579,
  580,  581,  582,  583,  584,  585,  586,  350,   -1,  365,
  590,  416,   -1,   -1,  416,  416,  596,  597,  598,  599,
  600,  601,  602,   -1,   -1,   -1,  416,  416,  416,  609,
  610,  611,  612,  613,  614,  615,  616,  617,  416,   -1,
   -1,   -1,  416,  623,  624,  625,  626,   93,  359,  416,
  630,  631,   -1,   -1,  416,  635,  636,   -1,  416,  416,
  640,  641,  416,  416,  416,  416,  416,  647,  648,  416,
  416,  416,  652,  653,  416,  416,  416,  657,  658,  416,
  416,  416,  416,  257,  258,  259,  260,  416,  416,  263,
  264,  416,  416,  267,  268,  416,  416,  416,  416,  416,
  416,  416,  276,  416,  416,  279,  416,  281,  416,  416,
  416,  416,  286,  416,  416,  416,  416,  416,  416,  416,
  416,  416,  416,  297,  416,  416,  416,  301,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
  416,  416,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,
  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,   -1,  339,   -1,  341,  342,   -1,
   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,   -1,   -1,   93,   -1,
  364,   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,
   -1,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,  399,   -1,   -1,   -1,  403,
  276,  405,   -1,  279,   -1,  281,  410,   -1,  412,   -1,
  286,  415,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  424,  297,   -1,   -1,   -1,  301,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,  338,  339,   -1,  341,  342,   -1,   -1,  345,
  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,  369,  370,   -1,   -1,  373,   -1,   -1,
  376,   -1,   -1,  379,  380,  381,  382,  383,  384,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,  257,  399,   -1,   -1,   -1,  403,   -1,  405,
  265,   -1,   -1,   -1,  410,   -1,  412,   -1,   -1,  415,
  275,  276,   -1,   -1,  279,   -1,  281,  282,  424,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,  298,   93,   -1,  301,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,  324,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,  257,   -1,   -1,   -1,  364,
   -1,   -1,   -1,  265,   -1,  370,   -1,   -1,  373,   -1,
   -1,  376,   -1,  275,  276,   -1,   -1,  279,   -1,  281,
  282,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,  396,  397,   -1,  399,  297,  298,   93,   -1,  301,
  405,   -1,   -1,   -1,   -1,  410,  411,  412,   -1,   -1,
  415,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,
  322,   -1,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  257,   -1,
   -1,   -1,  364,   -1,   -1,   -1,  265,   -1,  370,   -1,
   -1,  373,   -1,   -1,  376,   -1,  275,  276,   -1,   -1,
  279,   -1,  281,  282,   -1,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,  396,  397,   -1,  399,  297,  298,
   93,   -1,  301,  405,   -1,   -1,   -1,   -1,  410,  411,
  412,   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  424,  322,   -1,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,  342,   -1,   -1,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,  257,   -1,   -1,   -1,  364,   -1,   -1,   -1,  265,
   -1,  370,   -1,   -1,  373,   -1,   -1,  376,   -1,  275,
  276,   -1,   -1,  279,   -1,  281,  282,   -1,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,  396,  397,   -1,
  399,  297,  298,   93,   -1,  301,  405,   -1,   -1,   -1,
   -1,  410,  411,  412,   -1,   -1,  415,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,  424,  322,   -1,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,  345,
  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  257,   -1,   -1,   -1,  364,   -1,
   -1,   -1,  265,   -1,  370,   -1,   -1,  373,   -1,   -1,
  376,   -1,  275,  276,   -1,   -1,  279,   -1,  281,  282,
   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
  396,  397,   -1,  399,  297,  298,   93,   -1,  301,  405,
   -1,   -1,   -1,   -1,  410,  411,  412,   -1,   -1,  415,
   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,  322,
   -1,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  342,
   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,   -1,  257,   -1,   -1,
   -1,  364,   -1,   -1,   -1,  265,   -1,  370,   -1,   -1,
  373,   -1,   -1,  376,   -1,  275,  276,   -1,   -1,  279,
   -1,  281,  282,   -1,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,  396,  397,   -1,  399,  297,  298,   93,
   -1,  301,  405,   -1,   -1,   -1,   -1,  410,  411,  412,
   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,   -1,  319,
   -1,  424,  322,   -1,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  257,   -1,   -1,   -1,  364,   -1,   -1,   -1,  265,   -1,
  370,   -1,   -1,  373,   -1,   -1,  376,   -1,  275,  276,
   -1,   -1,  279,   -1,  281,  282,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,  396,  397,   -1,  399,
  297,  298,   93,   -1,  301,  405,   -1,   -1,   -1,   -1,
  410,  411,  412,   -1,   -1,  415,   -1,   -1,   -1,   -1,
   -1,   -1,  319,   -1,  424,  322,   -1,  324,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,   -1,  257,   -1,   -1,   -1,  364,   -1,   -1,
   -1,  265,   -1,  370,   -1,   -1,  373,   -1,   -1,  376,
   -1,  275,  276,   -1,   -1,  279,   -1,  281,  282,   -1,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  396,
  397,   -1,  399,  297,  298,   93,   -1,  301,  405,   -1,
   -1,   -1,   -1,  410,  411,  412,   -1,   -1,  415,   -1,
   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,  322,   -1,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,
   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  257,   -1,   -1,   -1,
  364,   -1,   -1,   -1,  265,   -1,  370,   -1,   -1,  373,
   -1,   -1,  376,   -1,  275,  276,   -1,   -1,  279,   -1,
  281,  282,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,  396,  397,   -1,  399,  297,  298,   93,   -1,
  301,  405,   -1,   -1,   -1,   -1,  410,  411,  412,   -1,
   -1,  415,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,
  424,  322,   -1,  324,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  257,
   -1,   -1,   -1,  364,   -1,   -1,   -1,  265,   -1,  370,
   -1,   -1,  373,   -1,   -1,  376,   -1,  275,  276,   -1,
   -1,  279,   -1,  281,  282,   -1,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,  396,  397,   -1,  399,  297,
  298,   93,   -1,  301,  405,   -1,   -1,   -1,   -1,  410,
  411,  412,   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,
   -1,  319,   -1,  424,  322,   -1,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,  342,   -1,   -1,  345,  346,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  257,   -1,   -1,   -1,  364,   -1,   -1,   -1,
  265,   -1,  370,   -1,   -1,  373,   -1,   -1,  376,   -1,
  275,  276,   -1,   -1,  279,   -1,  281,  282,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,  396,  397,
   -1,  399,  297,  298,   93,   -1,  301,  405,   -1,   -1,
   -1,   -1,  410,  411,  412,   -1,   -1,  415,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   -1,  424,  322,   -1,  324,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,  257,   -1,   -1,   -1,  364,
   -1,   -1,   -1,  265,   -1,  370,   -1,   -1,  373,   -1,
   -1,  376,   -1,  275,  276,   -1,   -1,  279,   -1,  281,
  282,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,  396,  397,   -1,  399,  297,  298,   93,   -1,  301,
  405,   -1,   -1,   -1,   -1,  410,  411,  412,   -1,   -1,
  415,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,
  322,   -1,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  257,   -1,
   -1,   -1,  364,   -1,   -1,   -1,  265,   -1,  370,   -1,
   -1,  373,   -1,   -1,  376,   -1,  275,  276,   -1,   -1,
  279,   -1,  281,  282,   -1,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,  396,  397,   -1,  399,  297,  298,
   -1,   -1,  301,  405,   -1,   -1,   -1,   -1,  410,  411,
  412,   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,   93,
  319,   -1,  424,  322,   -1,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,  342,   -1,   -1,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,  257,   -1,   -1,   -1,  364,   -1,   -1,   -1,  265,
   -1,  370,   -1,   -1,  373,   -1,   -1,  376,   -1,  275,
  276,   -1,   -1,  279,   -1,  281,  282,   93,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,  396,  397,   -1,
  399,  297,  298,   -1,   -1,  301,  405,   -1,   -1,   -1,
   -1,  410,  411,  412,   -1,   -1,  415,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,  424,  322,   -1,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,  345,
  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,   -1,   -1,
  376,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,  276,  399,   -1,  279,   -1,  281,   -1,  405,
   -1,   -1,  286,   -1,  410,  411,  412,   93,   -1,  415,
   -1,   -1,   -1,  297,   -1,   -1,   -1,  301,  424,   -1,
   -1,   -1,   -1,   -1,  308,   -1,  310,   -1,   -1,  313,
  314,   -1,  316,  317,   -1,  319,   -1,   -1,  322,   -1,
  324,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,  341,   -1,   -1,
  276,  345,  346,  279,   -1,  281,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,
  364,  297,   -1,   -1,   -1,  301,  370,   -1,   -1,  373,
   -1,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,  320,   -1,  322,   -1,  324,   -1,
   93,   -1,   -1,  397,  330,  399,   -1,   -1,  334,   -1,
   -1,  405,   -1,  339,   -1,   -1,  410,   -1,  412,   -1,
   -1,  415,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  424,   -1,  358,   -1,   -1,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,  369,  370,   -1,   -1,  373,   -1,   -1,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,   -1,  399,  400,  401,   -1,   -1,   -1,  405,
  276,   -1,  408,  279,  410,  281,   -1,   -1,   -1,  415,
  286,   -1,   -1,   -1,   -1,  421,   -1,   -1,  424,  295,
   -1,  297,  298,   93,   -1,  301,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   -1,   -1,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  332,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,  345,
  346,   -1,   -1,   -1,   -1,  351,  352,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  257,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,   -1,   -1,
  376,   -1,   -1,  276,   -1,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,  295,  399,  297,  298,   93,   -1,  301,  405,
   -1,   -1,   -1,   -1,  410,   -1,  412,   -1,   -1,  415,
   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,  322,
   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  332,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  342,
   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,  351,  352,
   -1,   -1,   -1,   -1,   -1,  358,   -1,  257,   -1,   -1,
   -1,  364,  262,   -1,   -1,   -1,   -1,  370,   -1,   -1,
  373,   -1,   -1,  376,   -1,   -1,  276,   -1,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  397,   -1,  399,  297,  298,   93,
   -1,  301,  405,  303,   -1,   -1,   -1,  410,   -1,  412,
   -1,   -1,  415,   -1,   -1,   -1,   -1,   -1,   -1,  319,
   -1,  424,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,
   -1,   -1,   -1,  353,  354,   -1,   -1,   -1,  358,   -1,
  257,   -1,   -1,   -1,  364,  262,   -1,   -1,   -1,   -1,
  370,   -1,   -1,  373,   -1,   -1,  376,   -1,   -1,  276,
   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,  399,
  297,  298,   93,   -1,  301,  405,  303,   -1,   -1,   -1,
  410,   -1,  412,   -1,   -1,  415,   -1,   -1,   -1,   -1,
   -1,   -1,  319,   -1,  424,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,  353,  354,   -1,   -1,
   -1,  358,   -1,  257,   -1,   -1,   -1,  364,  262,   -1,
   -1,   -1,   -1,  370,   -1,   -1,  373,   -1,   -1,  376,
   -1,   -1,  276,   -1,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  397,   -1,  399,  297,  298,   -1,   -1,  301,  405,  303,
   -1,   -1,   -1,  410,   -1,  412,   -1,   -1,  415,   93,
   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,  322,   -1,
  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,
   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,  353,
  354,   -1,   -1,   -1,  358,   -1,  257,   -1,   -1,   -1,
  364,   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,
   -1,   -1,  376,   93,   -1,  276,   -1,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,  399,  297,   -1,   -1,   -1,
  301,  405,   -1,   -1,   -1,   -1,  410,  308,  412,   -1,
   -1,  415,  313,  314,   -1,  316,  317,   -1,  319,   -1,
  424,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,  339,   -1,
   -1,   -1,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,
   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,
   -1,   -1,  373,  257,   -1,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,  276,  277,   -1,  279,  397,  281,  399,   -1,
   -1,   -1,  286,  287,  405,   93,   -1,   -1,   -1,  410,
   -1,  412,   -1,  297,  415,   -1,   -1,  301,   -1,   -1,
   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  318,  319,   -1,  257,  322,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,   -1,   -1,   -1,
  334,   -1,   -1,  273,  274,  339,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  286,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,   -1,  297,   -1,   -1,
  364,  301,   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,
   -1,   -1,  376,   -1,   -1,   -1,   -1,   -1,  318,  319,
   -1,  257,  322,   -1,  324,   -1,  262,   -1,   93,   -1,
  330,   -1,   -1,  397,  334,  399,   -1,   -1,   -1,  339,
  276,  405,   -1,  279,   -1,  281,  410,   -1,   -1,   -1,
  286,  415,   -1,  417,   -1,   -1,   -1,   -1,  358,  295,
  424,  297,   -1,   -1,  364,  301,   -1,  303,   -1,   -1,
  370,   -1,   -1,  373,   -1,   -1,  376,   -1,   -1,   -1,
   -1,   -1,   -1,  319,   93,   -1,  322,   -1,  324,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  397,   -1,  399,
  336,   -1,   -1,  339,   -1,  405,   -1,   -1,  276,  345,
  410,  279,   -1,  281,   -1,  415,   -1,  417,  286,   -1,
   -1,   -1,  358,   -1,  424,   -1,   -1,  295,  364,  297,
   -1,   -1,   -1,  301,  370,  303,   -1,  373,   -1,   -1,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,
   -1,  319,   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,
   -1,  397,   -1,  399,   -1,   -1,   -1,   -1,  336,  405,
   -1,  339,   -1,   -1,  410,   -1,  412,  345,   -1,  415,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,
  358,   -1,  257,   -1,   93,   -1,  364,  262,   -1,   -1,
   -1,   -1,  370,   -1,   -1,  373,   -1,   -1,  376,   -1,
   -1,  276,   -1,   -1,  279,   -1,  281,  385,   -1,   -1,
   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
  295,  399,  297,   -1,   -1,   -1,  301,  405,  303,   -1,
   -1,   -1,  410,   -1,  412,   -1,   -1,  415,  257,   -1,
   -1,   -1,   -1,  262,  319,   -1,  424,  322,   -1,  324,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,
  279,  336,  281,   -1,  339,   -1,   -1,  286,   -1,   -1,
  345,   -1,   -1,   -1,   -1,   -1,  295,   -1,  297,   -1,
   -1,   -1,  301,  358,  303,   -1,   -1,   93,   -1,  364,
   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,   -1,
  319,  376,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,
  385,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,
  339,   -1,  397,   -1,  399,   -1,  345,   -1,   -1,   -1,
  405,   -1,   -1,   -1,   -1,  410,   -1,  412,   -1,  358,
  415,   -1,   -1,   -1,   -1,  364,   -1,   -1,  257,  424,
   -1,  370,   -1,   -1,  373,   -1,   -1,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  385,  276,   -1,   -1,
  279,  280,  281,   -1,   -1,   -1,   -1,  286,  397,   -1,
  399,   -1,   -1,   -1,   -1,   -1,  405,   -1,  297,   -1,
   93,  410,  301,  412,   -1,   -1,  415,   -1,   -1,   -1,
  309,   -1,   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,
  319,   -1,   -1,  322,   -1,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,   -1,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,  257,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,
   -1,  370,   -1,   -1,  373,   -1,   -1,  376,   -1,   -1,
  276,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,   93,
  399,  297,  298,   -1,   -1,  301,  405,   -1,   -1,   -1,
   -1,  410,   -1,   -1,   -1,   -1,  415,   -1,   -1,   -1,
   -1,  420,   -1,  319,   -1,  424,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,  342,   -1,   -1,  345,
  346,   -1,   -1,  349,  350,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  257,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,   -1,   -1,
  376,   -1,   -1,  276,   -1,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   93,   -1,
   -1,  397,   -1,  399,  297,   -1,   -1,   -1,  301,  405,
   -1,   -1,   -1,   -1,  410,   -1,   -1,   -1,   -1,  415,
   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  424,  322,
   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,  331,   -1,
   -1,   -1,  335,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  358,   -1,   -1,   -1,   -1,
   -1,  364,   -1,   -1,  367,   -1,   -1,  370,   -1,   -1,
  373,   -1,  276,  376,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  297,  397,   -1,  399,  301,   -1,   -1,
   -1,   -1,  405,   93,   -1,   -1,   -1,  410,   -1,  412,
  413,   -1,  415,   -1,   -1,  319,   -1,   -1,  322,   -1,
  324,  424,   -1,  327,   -1,   -1,   -1,  331,   -1,   -1,
   -1,  335,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,  358,   -1,   -1,   -1,   -1,   -1,
  364,  365,   -1,   -1,   -1,   -1,  370,   -1,   -1,  373,
   -1,  276,  376,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,  397,   -1,  399,  301,   -1,   -1,   -1,
   -1,  405,   -1,   -1,   -1,   -1,  410,   -1,  257,  413,
   -1,  415,   -1,   93,  319,  320,   -1,  322,  422,  324,
  424,   -1,  271,   -1,   -1,  330,   -1,  276,   -1,  334,
  279,   -1,  281,   -1,  339,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,   -1,  301,  358,   -1,   -1,  305,   -1,   -1,  364,
   -1,   -1,   -1,   93,  369,  370,   -1,  257,  373,   -1,
  319,  376,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,  279,
  339,  281,  397,   -1,  399,   -1,  286,   -1,   -1,   -1,
  405,   -1,   -1,   -1,   -1,  410,   -1,  297,   -1,  358,
  415,  301,   -1,   -1,   -1,  364,  421,   -1,   -1,  424,
   -1,  370,   -1,   -1,  373,   -1,   -1,  376,   -1,  319,
  320,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  330,   -1,   -1,   -1,  334,   -1,  395,   -1,  397,  339,
  399,   -1,   -1,   -1,   -1,   -1,  405,   -1,   -1,   -1,
   -1,  410,   93,  412,   -1,   -1,  415,   -1,  358,   -1,
   -1,   -1,   -1,   -1,  364,  424,   -1,  257,   -1,   -1,
  370,   -1,   -1,  373,   -1,   -1,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  286,  397,   -1,  399,
   -1,   -1,   -1,   -1,   -1,  405,   -1,  297,   -1,   -1,
  410,  301,   -1,   -1,   -1,  415,   93,  257,   -1,   -1,
   -1,  421,   -1,   -1,  424,   -1,   -1,   -1,   -1,  319,
   -1,   -1,  322,   -1,  324,   -1,  276,   -1,   -1,  279,
  330,  281,   -1,   -1,  334,   -1,  286,  337,   -1,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,
   -1,  301,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,  319,
  370,   -1,  322,  373,  324,   -1,  376,  327,   -1,   -1,
   -1,  331,   -1,   -1,   -1,  335,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,  399,
   -1,   -1,   -1,   -1,   -1,  405,  257,   -1,  358,   -1,
  410,   -1,   93,   -1,  364,  415,   -1,   -1,   -1,   -1,
  370,   -1,   -1,  373,  424,  276,  376,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  297,  397,   -1,  399,
  301,   -1,   -1,   -1,   -1,  405,   -1,   -1,   -1,   -1,
  410,   -1,   -1,  413,   -1,  415,   -1,   93,  319,   -1,
  257,  322,   -1,  324,  424,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,  276,
   -1,   -1,  279,  344,  281,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,   -1,
  297,   -1,   -1,  364,  301,   -1,   -1,  368,   -1,  370,
   -1,  372,  373,   -1,   -1,  376,   -1,   -1,   -1,   -1,
   -1,   -1,  319,   -1,   -1,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,  339,   -1,  405,   -1,   -1,  344,   -1,  410,
   -1,   -1,   -1,   -1,  415,   -1,   93,   -1,   -1,   -1,
   -1,  358,   -1,  424,   -1,   -1,  257,  364,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,  373,   -1,   -1,  376,
   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,  297,   -1,  405,   -1,
  301,   93,   -1,  410,   -1,   -1,   -1,   -1,  415,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,  424,  319,   -1,
   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,
  276,   -1,   -1,  279,   -1,  281,   -1,   -1,  339,   -1,
  286,  342,   -1,   -1,  345,   -1,   -1,   -1,   -1,  295,
   -1,  297,   -1,   -1,   -1,  301,   93,  358,   -1,   -1,
   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,
   -1,   -1,  373,  319,   -1,  376,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  332,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,  397,   -1,  399,   -1,
   -1,   -1,   -1,   -1,  405,   -1,   -1,   -1,   -1,  410,
  257,   -1,  358,   -1,  415,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,  424,  370,   -1,   93,  373,   -1,  276,
  376,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  297,  397,   -1,  399,  301,   -1,   -1,   -1,   -1,  405,
   -1,   -1,   -1,   -1,  410,  257,   -1,   -1,   -1,  415,
   -1,   -1,  319,   -1,   -1,  322,   -1,  324,  424,   -1,
   -1,   93,   -1,   -1,  276,  332,   -1,  279,   -1,  281,
   -1,   -1,  339,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  297,   -1,   -1,   -1,  301,
   -1,  358,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,
  257,   -1,   -1,  370,   -1,   -1,  373,  319,   -1,  376,
  322,   -1,  324,   -1,   -1,   -1,   93,   -1,   -1,  276,
  332,   -1,  279,   -1,  281,   -1,   -1,  339,   -1,  286,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,   -1,
  297,   -1,   -1,  410,  301,   -1,  358,   -1,  415,   -1,
   -1,   -1,  364,   -1,   -1,   -1,   -1,  424,  370,   -1,
   -1,  373,  319,   -1,  376,  322,   -1,  324,   -1,   -1,
  257,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,  397,   -1,  399,  345,  276,
   -1,   -1,  279,  405,  281,   -1,   -1,   -1,  410,  286,
   -1,  358,   -1,  415,   -1,   -1,   -1,  364,  295,   -1,
  297,   -1,  424,  370,  301,   -1,  373,   -1,   -1,  376,
   -1,   -1,   -1,   -1,   -1,  257,   93,   -1,   -1,   -1,
   -1,   -1,  319,   -1,   -1,  322,   -1,  324,   -1,  396,
  397,   -1,  399,   -1,  276,  332,   -1,  279,  405,  281,
   -1,   -1,  339,  410,  286,   -1,   -1,   -1,  415,   -1,
   -1,   -1,   -1,  295,   -1,  297,   -1,  424,   -1,  301,
   -1,  358,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,
  257,   93,   -1,  370,   -1,   -1,  373,  319,   -1,  376,
  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,  279,   -1,  281,   -1,   -1,  339,   -1,  286,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,   -1,
  297,   -1,   -1,  410,  301,   -1,  358,   -1,  415,   -1,
   -1,   -1,  364,   -1,   -1,  257,   -1,  424,  370,   -1,
   -1,  373,  319,   -1,  376,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,  279,   -1,  281,
   -1,   -1,  339,   -1,  286,  397,   -1,  399,   -1,   -1,
   -1,   -1,   -1,  405,   -1,  297,   -1,   -1,  410,  301,
   -1,  358,   -1,  415,   -1,   -1,   -1,  364,   -1,   -1,
  257,   -1,  424,  370,   -1,   -1,  373,  319,   -1,  376,
  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,  276,
   -1,   -1,  279,   -1,  281,   -1,   -1,  339,   -1,  286,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,   -1,
  297,   -1,   -1,  410,  301,   -1,  358,   -1,  415,   -1,
   -1,   -1,  364,   -1,   -1,  257,   -1,  424,  370,   -1,
   -1,  373,  319,   -1,  376,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,  279,   -1,  281,
   -1,   -1,  339,   -1,  286,  397,   -1,  399,   -1,   -1,
   -1,   -1,   -1,  405,   -1,  297,   -1,   -1,  410,  301,
   -1,  358,   -1,  415,   -1,   -1,   -1,  364,   -1,   -1,
   -1,   -1,  424,  370,   -1,   -1,  373,  319,   -1,  376,
  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
  397,   -1,  399,   -1,   -1,   -1,   -1,   -1,  405,   -1,
   -1,   -1,   -1,  410,   -1,   -1,  358,   -1,  415,   -1,
   -1,   -1,  364,   -1,   -1,   -1,   -1,  424,  370,  261,
   -1,  373,   -1,   -1,  376,   -1,   -1,  269,   -1,   -1,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  397,  288,  399,  290,  291,
  292,   -1,   -1,  405,   -1,   -1,   -1,   -1,  410,   -1,
  302,  303,  304,  415,  306,  307,   -1,   -1,   -1,  311,
   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,  321,
   -1,  323,   -1,   -1,  326,   -1,  328,  329,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  355,  356,  357,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,   -1,   -1,   -1,   -1,  371,
   -1,   -1,  374,  375,   -1,  377,  378,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  386,  387,  388,  389,  390,  391,
  392,  393,  394,   -1,   -1,   -1,  398,   -1,   -1,   -1,
   -1,   -1,  404,   -1,  406,  407,   -1,  409,   -1,   -1,
   -1,   -1,  414,   -1,   -1,   -1,  418,   -1,   -1,   -1,
   -1,  423,  424,  313,   -1,  315,  316,  317,  318,  319,
   -1,   -1,   -1,   -1,   -1,  325,  326,  327,  328,  329,
  330,   -1,  332,  333,  334,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  345,   -1,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,
);
$YYFINAL=2;
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
$YYMAXTOKEN=424;
#if YYDEBUG
@yyname = (
"end-of-file",'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
'','','','','','','','','','','','','','','','','','','','','','','','',"':'",'','',"'='",'','','','','','','','',
'','','','','','','','','','','','','','','','','','','','','',"'['",'',"']'",'','','','','','','','','','','','',
'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',"ADDITIONAL",
"AEXTENSION","AFORMAT","AGLOBAL","ALIGNMENT","ALIGNED","ANAME","AOPENFILE",
"APPEND","APPLICATION","AUSASHOW","AWIDTH","ARRAY","BATCH","BORDER","BOOLEAN",
"BUTTON","CASESENSITIVE","CHARACTERS","CODE","CODEDELIMITER","CODON","COMMENT",
"CONTINOUS","CORBA","CREATE","CPU","DATA_TYPES","DATAFILE","DEFAULT",
"DELIMITER","DIRECTORY","DIRECTORY_ATTR","DIRLIST","DISCRETESTATES","DISTANCES",
"DOCUMENTATION","ENDSECTION","ENTRY","EXECUTABLE","EXPECTED","EXTENSION",
"EXTERNAL","EMBASSY","FAILRANGE","FEATOUT","FEATURES","FILELIST","FOLDER",
"FLOAT","FREQUENCIES","GDESC","GENEDATA","GOUTFILE","GRAPH","GROUPS",
"GSUBTITLE","GTITLE","GUI","GXTITLE","GYTITLE","HEADER","HELP","INCREMENT",
"INFILE","INFORMATION","INTEGER","KNOWNTYPE","LENGTH","LIST","LOWER","MATRIX",
"MATRIXF","MAXIMUM","MAXLENGTH","MAXREADS","MAXSEQS","MINIMUM","MINLENGTH",
"MINSEQS","MINSIZE","MINTAGS","MISSING","MISSVAL","MULTIPLE","NAME","NONEMBOSS",
"NNAME","NULLOK","NULLDEFAULT","OBO","OBSOLETE","ODIRECTORY","OFORMAT","OFNAME",
"OFFORMAT","OSEXTENSION","OSSINGLE","OUTCODON","OUTDIR","OUTFILE",
"OUTPUTMODIFIER","OUTOBO","OUTRESOURCE","OUTTAXON","OUTTEXT","OUTURL",
"PARAMETER","PATTERN","PATTERN_","PMISMATCH","PNAME","PRECISION","PROMPT",
"PROPERTIES","PROTEIN","QUALIFIER","RANGE","REGEXP","RELATIONS","REPORT",
"RESOURCE","REXTENSION","RFORMAT","RNAME","ROPENFILE","RSCORESHOW","RUSASHOW",
"SASK","SECTION","SELECTION","SEQALL","SEQOUT","SEQOUTALL","SEQOUTSET","SEQSET",
"SEQSETALL","SEQUENCE","SIDE","SIZE","STANDARD","STRING","STYLE","SUM",
"SUMTEST","SUPPLIER","TAGLIST","TAXON","TEMPLATE","TEXT","TOGGLE","TOLERANCE",
"TREE","TRUEMINIMUM","TRYDEFAULT","TYPE","UPPER","URL","VALID","VALUE","VALUES",
"VARIABLE","VERSION","WITHIN","WARNRANGE","WORD","XYGRAPH","W2HUNKNOWN",
);
@yyrule = (
"\$accept : acd_file",
"acd_file : appl_def param_defs",
"appl_def : APPLICATION sep VALUE '[' appl_attrs ']'",
"appl_attrs :",
"appl_attrs : appl_attrs appl_attr",
"appl_attr : DOCUMENTATION sep VALUE",
"appl_attr : GROUPS sep VALUE",
"appl_attr : GUI sep VALUE",
"appl_attr : BATCH sep VALUE",
"appl_attr : CPU sep VALUE",
"appl_attr : EMBASSY sep VALUE",
"appl_attr : EXECUTABLE sep VALUE",
"appl_attr : EXTERNAL sep VALUE",
"appl_attr : NONEMBOSS sep VALUE",
"appl_attr : COMMENT sep VALUE",
"appl_attr : SUPPLIER sep VALUE",
"appl_attr : VERSION sep VALUE",
"appl_attr : RELATIONS sep VALUE",
"appl_attr : OBSOLETE sep VALUE",
"param_defs :",
"param_defs : param_defs param_def",
"param_defs : param_defs param_section",
"param_section : section_def param_defs endsection_def",
"section_def : section sep VALUE '[' section_attrs ']'",
"endsection_def : ENDSECTION sep VALUE",
"section : SECTION",
"param_def : align sep VALUE '[' alignment_attrs ']'",
"param_def : array sep VALUE '[' array_attrs ']'",
"param_def : boolean sep VALUE '[' boolean_attrs ']'",
"param_def : codon sep VALUE '[' codon_attrs ']'",
"param_def : datafile sep VALUE '[' file_attrs ']'",
"param_def : directory sep VALUE '[' file_attrs ']'",
"param_def : dirlist sep VALUE '[' file_attrs ']'",
"param_def : discretestates sep VALUE '[' file_attrs ']'",
"param_def : distances sep VALUE '[' file_attrs ']'",
"param_def : featout sep VALUE '[' features_attrs ']'",
"param_def : features sep VALUE '[' features_attrs ']'",
"param_def : filelist sep VALUE '[' flist_attrs ']'",
"param_def : float sep VALUE '[' float_attrs ']'",
"param_def : frequencies sep VALUE '[' frequencies_attrs ']'",
"param_def : graph sep VALUE '[' graph_attrs ']'",
"param_def : infile sep VALUE '[' file_attrs ']'",
"param_def : integer sep VALUE '[' integer_attrs ']'",
"param_def : list sep VALUE '[' list_attrs ']'",
"param_def : matrix sep VALUE '[' matrix_attrs ']'",
"param_def : matrixf sep VALUE '[' matrix_attrs ']'",
"param_def : obo sep VALUE '[' obo_attrs ']'",
"param_def : outcodon sep VALUE '[' outcodon_attrs ']'",
"param_def : outdir sep VALUE '[' file_attrs ']'",
"param_def : outfile sep VALUE '[' file_attrs ']'",
"param_def : outobo sep VALUE '[' file_attrs ']'",
"param_def : outresource sep VALUE '[' file_attrs ']'",
"param_def : outtaxon sep VALUE '[' file_attrs ']'",
"param_def : outtext sep VALUE '[' file_attrs ']'",
"param_def : outurl sep VALUE '[' file_attrs ']'",
"param_def : pattern sep VALUE '[' pattern_attrs ']'",
"param_def : properties sep VALUE '[' file_attrs ']'",
"param_def : range sep VALUE '[' range_attrs ']'",
"param_def : report sep VALUE '[' report_attrs ']'",
"param_def : resource sep VALUE '[' resource_attrs ']'",
"param_def : selection sep VALUE '[' selection_attrs ']'",
"param_def : sequence sep VALUE '[' sequence_attrs ']'",
"param_def : seqset sep VALUE '[' sequence_attrs ']'",
"param_def : seqsetall sep VALUE '[' sequence_attrs ']'",
"param_def : seqall sep VALUE '[' sequence_attrs ']'",
"param_def : seqout sep VALUE '[' seq_out_attrs ']'",
"param_def : seqoutset sep VALUE '[' seq_out_attrs ']'",
"param_def : seqoutall sep VALUE '[' seq_out_attrs ']'",
"param_def : regexp sep VALUE '[' regexp_attrs ']'",
"param_def : string sep VALUE '[' string_attrs ']'",
"param_def : taxon sep VALUE '[' taxon_attrs ']'",
"param_def : text sep VALUE '[' text_attrs ']'",
"param_def : toggle sep VALUE '[' toggle_attrs ']'",
"param_def : tree sep VALUE '[' tree_attrs ']'",
"param_def : url sep VALUE '[' url_attrs ']'",
"param_def : VARIABLE sep VALUE VALUE",
"param_def : VARIABLE sep VALUE sep VALUE",
"param_def : xygraph sep VALUE '[' xygraph_attrs ']'",
"param_def : W2HUNKNOWN sep VALUE '[' unknown_attrs ']'",
"align : ALIGNMENT",
"array : ARRAY",
"boolean : BOOLEAN",
"codon : CODON",
"datafile : DATAFILE",
"directory : DIRECTORY",
"dirlist : DIRLIST",
"discretestates : DISCRETESTATES",
"distances : DISTANCES",
"features : FEATURES",
"featout : FEATOUT",
"filelist : FILELIST",
"float : FLOAT",
"frequencies : FREQUENCIES",
"graph : GRAPH",
"infile : INFILE",
"integer : INTEGER",
"list : LIST",
"matrix : MATRIX",
"matrixf : MATRIXF",
"obo : OBO",
"outcodon : OUTCODON",
"outdir : OUTDIR",
"outfile : OUTFILE",
"outobo : OUTOBO",
"outresource : OUTRESOURCE",
"outtaxon : OUTTAXON",
"outtext : OUTTEXT",
"outurl : OUTURL",
"pattern : PATTERN_",
"properties : PROPERTIES",
"range : RANGE",
"report : REPORT",
"regexp : REGEXP",
"resource : RESOURCE",
"selection : SELECTION",
"seqall : SEQALL",
"seqout : SEQOUT",
"seqoutall : SEQOUTALL",
"seqoutset : SEQOUTSET",
"seqset : SEQSET",
"seqsetall : SEQSETALL",
"sequence : SEQUENCE",
"string : STRING",
"taxon : TAXON",
"text : TEXT",
"toggle : TOGGLE",
"tree : TREE",
"url : URL",
"xygraph : XYGRAPH",
"general_attr : DEFAULT sep VALUE",
"general_attr : PROMPT sep VALUE",
"general_attr : INFORMATION sep VALUE",
"general_attr : CODE sep VALUE",
"general_attr : HELP sep VALUE",
"general_attr : VALID sep VALUE",
"general_attr : EXPECTED sep VALUE",
"general_attr : STANDARD sep VALUE",
"general_attr : ADDITIONAL sep VALUE",
"general_attr : PARAMETER sep VALUE",
"general_attr : MISSING sep VALUE",
"general_attr : OUTPUTMODIFIER sep VALUE",
"general_attr : CORBA sep VALUE",
"general_attr : STYLE sep VALUE",
"general_attr : COMMENT sep VALUE",
"general_attr : TEMPLATE sep VALUE",
"general_attr : QUALIFIER sep VALUE",
"general_attr : KNOWNTYPE sep VALUE",
"general_attr : W2HUNKNOWN sep VALUE",
"general_attr : RELATIONS sep VALUE",
"general_attr : FAILRANGE sep VALUE",
"general_attr : TRUEMINIMUM sep VALUE",
"alignment_attrs :",
"alignment_attrs : alignment_attrs alignment_attr",
"alignment_attr : general_attr",
"alignment_attr : align_gen_attr",
"alignment_attr : NAME sep VALUE",
"alignment_attr : TYPE sep VALUE",
"alignment_attr : TAGLIST sep VALUE",
"alignment_attr : MINSEQS sep VALUE",
"alignment_attr : MAXSEQS sep VALUE",
"alignment_attr : MULTIPLE sep VALUE",
"alignment_attr : NULLOK sep VALUE",
"alignment_attr : NULLDEFAULT sep VALUE",
"align_gen_attr : AFORMAT sep VALUE",
"align_gen_attr : AOPENFILE sep VALUE",
"align_gen_attr : AEXTENSION sep VALUE",
"align_gen_attr : ANAME sep VALUE",
"align_gen_attr : AWIDTH sep VALUE",
"align_gen_attr : AUSASHOW sep VALUE",
"align_gen_attr : AGLOBAL sep VALUE",
"boolean_attrs :",
"boolean_attrs : boolean_attrs general_attr",
"codon_attrs :",
"codon_attrs : codon_attrs codon_attr",
"codon_attr : general_attr",
"codon_attr : NAME sep VALUE",
"codon_attr : NULLOK sep VALUE",
"features_attrs :",
"features_attrs : features_attrs features_attr",
"features_attr : general_attr",
"features_attr : NAME sep VALUE",
"features_attr : EXTENSION sep VALUE",
"features_attr : OFNAME sep VALUE",
"features_attr : OFFORMAT sep VALUE",
"features_attr : TYPE sep VALUE",
"features_attr : NULLOK sep VALUE",
"features_attr : NULLDEFAULT sep VALUE",
"features_attr : MAXREADS sep VALUE",
"features_attr : ENTRY sep VALUE",
"file_attrs :",
"file_attrs : file_attrs file_attr",
"file_attr : general_attr",
"file_attr : TYPE sep VALUE",
"file_attr : NAME sep VALUE",
"file_attr : EXTENSION sep VALUE",
"file_attr : DIRECTORY_ATTR sep VALUE",
"file_attr : CHARACTERS sep VALUE",
"file_attr : LENGTH sep VALUE",
"file_attr : SIZE sep VALUE",
"file_attr : NULLOK sep VALUE",
"file_attr : NULLDEFAULT sep VALUE",
"file_attr : APPEND sep VALUE",
"file_attr : CREATE sep VALUE",
"file_attr : TRYDEFAULT sep VALUE",
"outcodon_attrs :",
"outcodon_attrs : outcodon_attrs outcodon_attr",
"outcodon_attr : general_attr",
"outcodon_attr : NAME sep VALUE",
"outcodon_attr : EXTENSION sep VALUE",
"outcodon_attr : NULLDEFAULT sep VALUE",
"outcodon_attr : NULLOK sep VALUE",
"outcodon_attr : ODIRECTORY sep VALUE",
"outcodon_attr : OFORMAT sep VALUE",
"flist_attrs :",
"flist_attrs : flist_attrs flist_attr",
"flist_attr : general_attr",
"float_attrs :",
"float_attrs : float_attrs float_attr",
"float_attr : integer_attr",
"float_attr : PRECISION sep VALUE",
"graph_attrs :",
"graph_attrs : graph_attrs graph_attr",
"graph_attr : general_attr",
"graph_attr : TYPE sep VALUE",
"graph_attr : GTITLE sep VALUE",
"graph_attr : GSUBTITLE sep VALUE",
"graph_attr : GXTITLE sep VALUE",
"graph_attr : GYTITLE sep VALUE",
"graph_attr : GDESC sep VALUE",
"graph_attr : NULLOK sep VALUE",
"graph_attr : NULLDEFAULT sep VALUE",
"integer_attrs :",
"integer_attrs : integer_attrs integer_attr",
"integer_attr : general_attr",
"integer_attr : MINIMUM sep VALUE",
"integer_attr : MAXIMUM sep VALUE",
"integer_attr : INCREMENT sep VALUE",
"integer_attr : WARNRANGE sep VALUE",
"list_attrs :",
"list_attrs : list_attrs list_attr",
"list_attr : selection_attr",
"matrix_attrs :",
"matrix_attrs : matrix_attrs matrix_attr",
"matrix_attr : general_attr",
"matrix_attr : PNAME sep VALUE",
"matrix_attr : NNAME sep VALUE",
"matrix_attr : PROTEIN sep VALUE",
"obo_attr : general_attr",
"obo_attr : ENTRY sep VALUE",
"obo_attr : MAXREADS sep VALUE",
"obo_attrs :",
"obo_attrs : obo_attrs obo_attr",
"pattern_attrs :",
"pattern_attrs : pattern_attrs pattern_attr",
"pattern_attr : general_attr",
"pattern_attr : MINLENGTH sep VALUE",
"pattern_attr : MAXLENGTH sep VALUE",
"pattern_attr : TYPE sep VALUE",
"pattern_attr : PMISMATCH sep VALUE",
"pattern_attr : LOWER sep VALUE",
"pattern_attr : UPPER sep VALUE",
"range_attrs :",
"range_attrs : range_attrs range_attr",
"range_attr : general_attr",
"range_attr : MINIMUM sep VALUE",
"range_attr : MAXIMUM sep VALUE",
"range_attr : MINSIZE sep VALUE",
"range_attr : SIZE sep VALUE",
"regexp_attrs :",
"regexp_attrs : regexp_attrs regexp_attr",
"regexp_attr : general_attr",
"regexp_attr : MINLENGTH sep VALUE",
"regexp_attr : MAXLENGTH sep VALUE",
"regexp_attr : LOWER sep VALUE",
"regexp_attr : UPPER sep VALUE",
"report_attrs :",
"report_attrs : report_attrs report_attr",
"report_attr : general_attr",
"report_attr : MINTAGS sep VALUE",
"report_attr : MULTIPLE sep VALUE",
"report_attr : NAME sep VALUE",
"report_attr : NULLOK sep VALUE",
"report_attr : NULLDEFAULT sep VALUE",
"report_attr : PRECISION sep VALUE",
"report_attr : REXTENSION sep VALUE",
"report_attr : RFORMAT sep VALUE",
"report_attr : RNAME sep VALUE",
"report_attr : ROPENFILE sep VALUE",
"report_attr : RSCORESHOW sep VALUE",
"report_attr : RUSASHOW sep VALUE",
"report_attr : TAGLIST sep VALUE",
"report_attr : TYPE sep VALUE",
"resource_attr : general_attr",
"resource_attr : ENTRY sep VALUE",
"resource_attrs :",
"resource_attrs : resource_attrs resource_attr",
"section_attrs :",
"section_attrs : section_attrs section_attr",
"section_attr : general_attr",
"section_attr : TYPE sep VALUE",
"section_attr : BORDER sep VALUE",
"section_attr : SIDE sep VALUE",
"section_attr : FOLDER sep VALUE",
"selection_attrs :",
"selection_attrs : selection_attrs selection_attr",
"selection_attr : general_attr",
"selection_attr : CODEDELIMITER sep VALUE",
"selection_attr : MINIMUM sep VALUE",
"selection_attr : MAXIMUM sep VALUE",
"selection_attr : BUTTON sep VALUE",
"selection_attr : CASESENSITIVE sep VALUE",
"selection_attr : HEADER sep VALUE",
"selection_attr : DELIMITER sep VALUE",
"selection_attr : VALUES sep VALUE",
"sequence_attrs :",
"sequence_attrs : sequence_attrs sequence_attr",
"sequence_attr : general_attr",
"sequence_attr : TYPE sep VALUE",
"sequence_attr : FEATURES sep VALUE",
"sequence_attr : ENTRY sep VALUE",
"sequence_attr : NULLOK sep VALUE",
"sequence_attr : ALIGNED sep VALUE",
"sequence_attr : MINSEQS sep VALUE",
"sequence_attr : SASK sep VALUE",
"seq_out_attrs :",
"seq_out_attrs : seq_out_attrs seq_out_attr",
"seq_out_attr : general_attr",
"seq_out_attr : NAME sep VALUE",
"seq_out_attr : EXTENSION sep VALUE",
"seq_out_attr : FEATURES sep VALUE",
"seq_out_attr : OSSINGLE sep VALUE",
"seq_out_attr : OSEXTENSION sep VALUE",
"seq_out_attr : NULLOK sep VALUE",
"seq_out_attr : NULLDEFAULT sep VALUE",
"seq_out_attr : TYPE sep VALUE",
"seq_out_attr : ALIGNED sep VALUE",
"string_attrs :",
"string_attrs : string_attrs string_attr",
"string_attr : regexp_attr",
"string_attr : WORD sep VALUE",
"string_attr : PATTERN sep VALUE",
"taxon_attr : general_attr",
"taxon_attr : ENTRY sep VALUE",
"taxon_attr : MAXREADS sep VALUE",
"taxon_attrs :",
"taxon_attrs : taxon_attrs taxon_attr",
"text_attr : general_attr",
"text_attr : ENTRY sep VALUE",
"text_attr : MAXREADS sep VALUE",
"text_attrs :",
"text_attrs : text_attrs text_attr",
"unknown_attrs :",
"unknown_attrs : unknown_attrs general_attr",
"url_attr : general_attr",
"url_attr : ENTRY sep VALUE",
"url_attr : MAXREADS sep VALUE",
"url_attrs :",
"url_attrs : url_attrs url_attr",
"xygraph_attrs :",
"xygraph_attrs : xygraph_attrs xygraph_attr",
"xygraph_attr : graph_attr",
"xygraph_attr : MULTIPLE sep VALUE",
"xygraph_attr : GOUTFILE sep VALUE",
"sep : ':'",
"sep : '='",
"toggle_attrs :",
"toggle_attrs : toggle_attrs general_attr",
"array_attrs :",
"array_attrs : array_attrs array_attr",
"array_attr : general_attr",
"array_attr : MINIMUM sep VALUE",
"array_attr : MAXIMUM sep VALUE",
"array_attr : INCREMENT sep VALUE",
"array_attr : PRECISION sep VALUE",
"array_attr : WARNRANGE sep VALUE",
"array_attr : SIZE sep VALUE",
"array_attr : SUM sep VALUE",
"array_attr : SUMTEST sep VALUE",
"array_attr : TOLERANCE sep VALUE",
"frequencies_attrs :",
"frequencies_attrs : frequencies_attrs frequencies_attr",
"frequencies_attr : general_attr",
"frequencies_attr : LENGTH sep VALUE",
"frequencies_attr : SIZE sep VALUE",
"frequencies_attr : CONTINOUS sep VALUE",
"frequencies_attr : GENEDATA sep VALUE",
"frequencies_attr : WITHIN sep VALUE",
"frequencies_attr : NULLOK sep VALUE",
"tree_attrs :",
"tree_attrs : tree_attrs tree_attr",
"tree_attr : general_attr",
"tree_attr : SIZE sep VALUE",
"tree_attr : NULLOK sep VALUE",
);
#endif
sub yyclearin {
  my  $p;
  ($p) = @_;
  $p->{yychar} = -1;
}
sub yyerrok {
  my  $p;
  ($p) = @_;
  $p->{yyerrflag} = 0;
}
sub new {
  my $p = bless {}, $_[0];
  $p->{yylex} = $_[1];
  $p->{yyerror} = $_[2];
  $p->{yydebug} = $_[3];
  return $p;
}
sub YYERROR {
  my  $p;
  ($p) = @_;
  ++$p->{yynerrs};
  $p->yy_err_recover;
}
sub yy_err_recover {
  my  $p;
  ($p) = @_;
  if ($p->{yyerrflag} < 3)
  {
    $p->{yyerrflag} = 3;
    while (1)
    {
      if (($p->{yyn} = $yysindex[$p->{yyss}->[$p->{yyssp}]]) && 
          ($p->{yyn} += $YYERRCODE) >= 0 && 
          $p->{yyn} <= $#yycheck &&
          $yycheck[$p->{yyn}] == $YYERRCODE)
      {
        warn("yydebug: state " . 
                     $p->{yyss}->[$p->{yyssp}] . 
                     ", error recovery shifting to state" . 
                     $yytable[$p->{yyn}] . "\n") 
                       if $p->{yydebug};
        $p->{yyss}->[++$p->{yyssp}] = 
          $p->{yystate} = $yytable[$p->{yyn}];
        $p->{yyvs}->[++$p->{yyvsp}] = $p->{yylval};
        next yyloop;
      }
      else
      {
        warn("yydebug: error recovery discarding state ".
              $p->{yyss}->[$p->{yyssp}]. "\n") 
                if $p->{yydebug};
        return(undef) if $p->{yyssp} <= 0;
        --$p->{yyssp};
        --$p->{yyvsp};
      }
    }
  }
  else
  {
    return (undef) if $p->{yychar} == 0;
    if ($p->{yydebug})
    {
      $p->{yys} = '';
      if ($p->{yychar} <= $YYMAXTOKEN) { $p->{yys} = 
        $yyname[$p->{yychar}]; }
      if (!$p->{yys}) { $p->{yys} = 'illegal-symbol'; }
      warn("yydebug: state " . $p->{yystate} . 
                   ", error recovery discards " . 
                   "token " . $p->{yychar} . "(" . 
                   $p->{yys} . ")\n");
    }
    $p->{yychar} = -1;
    next yyloop;
  }
0;
} # yy_err_recover

sub yyparse {
  my  $p;
  my $s;
  ($p, $s) = @_;
  if ($p->{yys} = $ENV{'YYDEBUG'})
  {
    $p->{yydebug} = int($1) if $p->{yys} =~ /^(\d)/;
  }

  $p->{yynerrs} = 0;
  $p->{yyerrflag} = 0;
  $p->{yychar} = (-1);

  $p->{yyssp} = 0;
  $p->{yyvsp} = 0;
  $p->{yyss}->[$p->{yyssp}] = $p->{yystate} = 0;

yyloop: while(1)
  {
    yyreduce: {
      last yyreduce if ($p->{yyn} = $yydefred[$p->{yystate}]);
      if ($p->{yychar} < 0)
      {
        if ((($p->{yychar}, $p->{yylval}) = 
            &{$p->{yylex}}($s)) < 0) { $p->{yychar} = 0; }
        if ($p->{yydebug})
        {
          $p->{yys} = '';
          if ($p->{yychar} <= $#yyname) 
             { $p->{yys} = $yyname[$p->{yychar}]; }
          if (!$p->{yys}) { $p->{yys} = 'illegal-symbol'; };
          warn("yydebug: state " . $p->{yystate} . 
                       ", reading " . $p->{yychar} . " (" . 
                       $p->{yys} . ")\n");
        }
      }
      if (($p->{yyn} = $yysindex[$p->{yystate}]) && 
          ($p->{yyn} += $p->{yychar}) >= 0 && 
          $p->{yyn} <= $#yycheck &&
          $yycheck[$p->{yyn}] == $p->{yychar})
      {
        warn("yydebug: state " . $p->{yystate} . 
                     ", shifting to state " .
              $yytable[$p->{yyn}] . "\n") if $p->{yydebug};
        $p->{yyss}->[++$p->{yyssp}] = $p->{yystate} = 
          $yytable[$p->{yyn}];
        $p->{yyvs}->[++$p->{yyvsp}] = $p->{yylval};
        $p->{yychar} = (-1);
        --$p->{yyerrflag} if $p->{yyerrflag} > 0;
        next yyloop;
      }
      if (($p->{yyn} = $yyrindex[$p->{yystate}]) && 
          ($p->{yyn} += $p->{'yychar'}) >= 0 &&
          $p->{yyn} <= $#yycheck &&
          $yycheck[$p->{yyn}] == $p->{yychar})
      {
        $p->{yyn} = $yytable[$p->{yyn}];
        last yyreduce;
      }
      if (! $p->{yyerrflag}) {
        &{$p->{yyerror}}('syntax error', $s);
        ++$p->{yynerrs};
      }
      return(undef) if $p->yy_err_recover;
    } # yyreduce
    warn("yydebug: state " . $p->{yystate} . 
                 ", reducing by rule " . 
                 $p->{yyn} . " (" . $yyrule[$p->{yyn}] . 
                 ")\n") if $p->{yydebug};
    $p->{yym} = $yylen[$p->{yyn}];
    $p->{yyval} = $p->{yyvs}->[$p->{yyvsp}+1-$p->{yym}];
if ($p->{yyn} == 2) {
#line 73 "acd.y"
{ $::app{'exec'} = $p->{yyvs}->[$p->{yyvsp}-3] unless defined $::app{'exec'};
                      $::app{'format'} = 'acd';
                    }
}
if ($p->{yyn} == 5) {
#line 82 "acd.y"
{ $::app{'description'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 6) {
#line 83 "acd.y"
{ $::app{'module'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 7) {
#line 84 "acd.y"
{ $::app{'term'} = 1 unless &is_yes($p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 8) {
#line 85 "acd.y"
{ $::app{'batch'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 9) {
#line 86 "acd.y"
{ $::app{'cpu'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 10) {
#line 87 "acd.y"
{ $::app{'embassy'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 11) {
#line 88 "acd.y"
{ $::app{'exec'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 12) {
#line 89 "acd.y"
{ $::app{'required_external'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 13) {
#line 90 "acd.y"
{ $::app{'non-emboss'} = 'Y' if &is_yes($p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 14) {
#line 91 "acd.y"
{ &add_option ('options', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 15) {
#line 92 "acd.y"
{ $::app {'supplier'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 16) {
#line 93 "acd.y"
{ $::app {'version'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 17) {
#line 94 "acd.y"
{ &add_relation ('options', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 18) {
#line 95 "acd.y"
{ $::app {'obsolete'} = $p->{yyvs}->[$p->{yyvsp}-0]; }
}
if ($p->{yyn} == 23) {
#line 106 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 24) {
#line 109 "acd.y"
{ &end_section ($p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 25) {
#line 112 "acd.y"
{ &start_qual ('section'); }
}
if ($p->{yyn} == 26) {
#line 115 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 27) {
#line 116 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 28) {
#line 117 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 29) {
#line 118 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 30) {
#line 119 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 31) {
#line 120 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 32) {
#line 121 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 33) {
#line 122 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 34) {
#line 123 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 35) {
#line 124 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 36) {
#line 125 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 37) {
#line 126 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 38) {
#line 127 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 39) {
#line 128 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 40) {
#line 129 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 41) {
#line 130 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 42) {
#line 131 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 43) {
#line 132 "acd.y"
{ &end_list ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 44) {
#line 133 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 45) {
#line 134 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 46) {
#line 135 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 47) {
#line 136 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 48) {
#line 137 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 49) {
#line 138 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 50) {
#line 139 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 51) {
#line 140 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 52) {
#line 141 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 53) {
#line 142 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 54) {
#line 143 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 55) {
#line 144 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 56) {
#line 145 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 57) {
#line 146 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 58) {
#line 147 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 59) {
#line 148 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 60) {
#line 149 "acd.y"
{ &end_list ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 61) {
#line 150 "acd.y"
{ &end_sequence ($p->{yyvs}->[$p->{yyvsp}-3], 1); }
}
if ($p->{yyn} == 62) {
#line 151 "acd.y"
{ &end_sequence ($p->{yyvs}->[$p->{yyvsp}-3], 3); }
}
if ($p->{yyn} == 63) {
#line 152 "acd.y"
{ &end_sequence ($p->{yyvs}->[$p->{yyvsp}-3], 3); }
}
if ($p->{yyn} == 64) {
#line 153 "acd.y"
{ &end_sequence ($p->{yyvs}->[$p->{yyvsp}-3], 3); }
}
if ($p->{yyn} == 65) {
#line 154 "acd.y"
{ &end_seqout ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 66) {
#line 155 "acd.y"
{ &end_seqout ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 67) {
#line 156 "acd.y"
{ &end_seqout ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 68) {
#line 157 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 69) {
#line 158 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 70) {
#line 159 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 71) {
#line 160 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 72) {
#line 161 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 73) {
#line 162 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 74) {
#line 163 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 77) {
#line 166 "acd.y"
{ &end_qual ($p->{yyvs}->[$p->{yyvsp}-3]); }
}
if ($p->{yyn} == 79) {
#line 170 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'alignment');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 80) {
#line 172 "acd.y"
{ &start_qual ('array');}
}
if ($p->{yyn} == 81) {
#line 173 "acd.y"
{ &start_qual ('bool'); }
}
if ($p->{yyn} == 82) {
#line 174 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'codon');    }
}
if ($p->{yyn} == 83) {
#line 175 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'datafile'); }
}
if ($p->{yyn} == 84) {
#line 176 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'filelist');    }
}
if ($p->{yyn} == 85) {
#line 177 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'directory');    }
}
if ($p->{yyn} == 86) {
#line 178 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'input');}
}
if ($p->{yyn} == 87) {
#line 179 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'input');}
}
if ($p->{yyn} == 88) {
#line 180 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'features'); }
}
if ($p->{yyn} == 89) {
#line 181 "acd.y"
{ &start_qual ('text'); &add_item ('datatype', 'featout');  }
}
if ($p->{yyn} == 90) {
#line 182 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'filelist'); }
}
if ($p->{yyn} == 91) {
#line 183 "acd.y"
{ &start_qual ('range'); &add_item ('numformat', 'float');  }
}
if ($p->{yyn} == 92) {
#line 184 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'input');}
}
if ($p->{yyn} == 93) {
#line 185 "acd.y"
{ &start_qual ('text'); &add_item ('datatype', 'graph');    }
}
if ($p->{yyn} == 94) {
#line 186 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'input');    }
}
if ($p->{yyn} == 95) {
#line 187 "acd.y"
{ &start_qual ('range'); &add_item ('numformat', 'int');    }
}
if ($p->{yyn} == 96) {
#line 188 "acd.y"
{ &start_qual ('list');  }
}
if ($p->{yyn} == 97) {
#line 189 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'matrix');   }
}
if ($p->{yyn} == 98) {
#line 190 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'matrixf');  }
}
if ($p->{yyn} == 99) {
#line 191 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'obo'); }
}
if ($p->{yyn} == 100) {
#line 192 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outcodon');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 101) {
#line 194 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'filelist');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 102) {
#line 196 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outfile');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 103) {
#line 198 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outfile');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 104) {
#line 200 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outfile');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 105) {
#line 202 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outfile');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 106) {
#line 204 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outfile');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 107) {
#line 206 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outfile');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 108) {
#line 208 "acd.y"
{ &start_qual ('text'); }
}
if ($p->{yyn} == 109) {
#line 209 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'input');}
}
if ($p->{yyn} == 110) {
#line 210 "acd.y"
{ &start_qual ('text'); }
}
if ($p->{yyn} == 111) {
#line 211 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'outfile');
			                            &add_item ('filetype', 'output');   }
}
if ($p->{yyn} == 112) {
#line 213 "acd.y"
{ &start_qual ('text'); }
}
if ($p->{yyn} == 113) {
#line 214 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'resource'); }
}
if ($p->{yyn} == 114) {
#line 215 "acd.y"
{ &start_qual ('selection');}
}
if ($p->{yyn} == 115) {
#line 216 "acd.y"
{ &start_qual ('seq'); }
}
if ($p->{yyn} == 116) {
#line 217 "acd.y"
{ &start_qual ('text'); &add_item ('datatype', 'seq');      }
}
if ($p->{yyn} == 117) {
#line 218 "acd.y"
{ &start_qual ('text'); &add_item ('datatype', 'seqoutall');}
}
if ($p->{yyn} == 118) {
#line 219 "acd.y"
{ &start_qual ('text'); &add_item ('datatype', 'seqout');   }
}
if ($p->{yyn} == 119) {
#line 220 "acd.y"
{ &start_qual ('seq'); }
}
if ($p->{yyn} == 120) {
#line 221 "acd.y"
{ &start_qual ('seqsetall'); }
}
if ($p->{yyn} == 121) {
#line 222 "acd.y"
{ &start_qual ('seq'); }
}
if ($p->{yyn} == 122) {
#line 223 "acd.y"
{ &start_qual ('text'); }
}
if ($p->{yyn} == 123) {
#line 224 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'taxon'); }
}
if ($p->{yyn} == 124) {
#line 225 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'text'); }
}
if ($p->{yyn} == 125) {
#line 226 "acd.y"
{ &start_qual ('bool'); }
}
if ($p->{yyn} == 126) {
#line 227 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'input');}
}
if ($p->{yyn} == 127) {
#line 228 "acd.y"
{ &start_qual ('file'); &add_item ('datatype', 'url'); }
}
if ($p->{yyn} == 128) {
#line 229 "acd.y"
{ &start_qual ('text'); &add_item ('datatype', 'graph');    }
}
if ($p->{yyn} == 129) {
#line 232 "acd.y"
{ &add_item ('default', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 130) {
#line 233 "acd.y"
{ &add_item ('realprompt', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 131) {
#line 234 "acd.y"
{ &add_item ('prompt', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 133) {
#line 236 "acd.y"
{ &add_item ('help', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 136) {
#line 239 "acd.y"
{ &add_boolean_item ('required', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 137) {
#line 240 "acd.y"
{ &add_boolean_item ('optional', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 138) {
#line 241 "acd.y"
{ if ($p->{yyvs}->[$p->{yyvsp}-0] =~ /y/i) { if ($::app{'non-emboss'} eq 'Y') { &add_item ('method', '$"$"'); } ; &add_boolean_item ('required', 'y'); } }
}
if ($p->{yyn} == 140) {
#line 243 "acd.y"
{ &add_boolean_item ('outputmodifier', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 141) {
#line 244 "acd.y"
{ &add_option ('options', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 142) {
#line 245 "acd.y"
{ &add_option ('style', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 143) {
#line 246 "acd.y"
{ &add_option ('options', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 144) {
#line 247 "acd.y"
{ &add_item ('method', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 145) {
#line 248 "acd.y"
{ &add_option ('options', 'qualifier ' . $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 146) {
#line 249 "acd.y"
{ &add_option ('options', 'knowntype ' . $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 148) {
#line 251 "acd.y"
{ &add_relation ('options', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 149) {
#line 252 "acd.y"
{ &add_boolean_item ('required', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 150) {
#line 253 "acd.y"
{ &add_boolean_item ('required', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 155) {
#line 263 "acd.y"
{ &add_item('name', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 156) {
#line 264 "acd.y"
{ &add_item('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 157) {
#line 265 "acd.y"
{ &add_item('taglist', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 158) {
#line 266 "acd.y"
{ &add_item('minseqs', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 159) {
#line 267 "acd.y"
{ &add_item('maxseqs', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 160) {
#line 268 "acd.y"
{ &add_boolean_item('multiple', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 161) {
#line 269 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 162) {
#line 270 "acd.y"
{ &add_item ('nulldefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 163) {
#line 273 "acd.y"
{ &add_item('aformat', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 164) {
#line 274 "acd.y"
{ &add_item('aopenfile', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 165) {
#line 275 "acd.y"
{ &add_item('aextension', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 166) {
#line 276 "acd.y"
{ &add_item('aname', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 167) {
#line 277 "acd.y"
{ &add_item('awidth', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 168) {
#line 278 "acd.y"
{ &add_boolean_item('ausashow', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 169) {
#line 279 "acd.y"
{ &add_boolean_item('aglobal', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 175) {
#line 291 "acd.y"
{ &add_item ('label', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 176) {
#line 292 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 180) {
#line 301 "acd.y"
{ &add_item ('label', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 181) {
#line 302 "acd.y"
{ &add_item ('extension', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 182) {
#line 303 "acd.y"
{ &add_item ('ofname', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 183) {
#line 304 "acd.y"
{ &add_item ('offormat', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 184) {
#line 305 "acd.y"
{ &add_item ('sequence_type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 185) {
#line 306 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 186) {
#line 307 "acd.y"
{ &add_boolean_item ('nulldefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 187) {
#line 308 "acd.y"
{ &add_item('maxreads', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 188) {
#line 309 "acd.y"
{ &add_item('entry', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 192) {
#line 317 "acd.y"
{ &add_item ('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 193) {
#line 318 "acd.y"
{ &add_item ('label', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 194) {
#line 319 "acd.y"
{ &add_item ('extension', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 195) {
#line 320 "acd.y"
{ &add_item ('directory', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 196) {
#line 321 "acd.y"
{ &add_item ('characters', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 197) {
#line 322 "acd.y"
{ &add_item ('length', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 198) {
#line 323 "acd.y"
{ &add_item ('size', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 199) {
#line 324 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 200) {
#line 325 "acd.y"
{ &add_boolean_item ('nulldefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 201) {
#line 326 "acd.y"
{ &add_boolean_item ('append', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 202) {
#line 327 "acd.y"
{ &add_boolean_item ('create', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 203) {
#line 328 "acd.y"
{ &add_boolean_item ('trydefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 207) {
#line 337 "acd.y"
{ &add_item ('label', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 208) {
#line 338 "acd.y"
{ &add_item ('extension', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 209) {
#line 339 "acd.y"
{ &add_boolean_item ('nulldefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 210) {
#line 340 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 211) {
#line 341 "acd.y"
{ &add_item ('odirectory', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 212) {
#line 342 "acd.y"
{ &add_boolean_item ('oformat', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 219) {
#line 358 "acd.y"
{ &add_item ('precision', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 223) {
#line 366 "acd.y"
{ &add_item ('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 224) {
#line 367 "acd.y"
{ &add_item ('gtitle', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 225) {
#line 368 "acd.y"
{ &add_item ('gsubtitle', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 226) {
#line 369 "acd.y"
{ &add_item ('gxtitle', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 227) {
#line 370 "acd.y"
{ &add_item ('gytitle', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 228) {
#line 371 "acd.y"
{ &add_item ('gdesc', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 229) {
#line 372 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 230) {
#line 373 "acd.y"
{ &add_boolean_item ('nulldefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 234) {
#line 381 "acd.y"
{ &add_item ('hardmin', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 235) {
#line 382 "acd.y"
{ &add_item ('hardmax', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 236) {
#line 383 "acd.y"
{ &add_item ('scaleinc', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 244) {
#line 400 "acd.y"
{ &add_item ('pname', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 245) {
#line 401 "acd.y"
{ &add_item ('nname', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 246) {
#line 402 "acd.y"
{ &add_boolean_item ('protein', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 248) {
#line 406 "acd.y"
{ &add_item ('entry', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 249) {
#line 407 "acd.y"
{ &add_item ('maxreads', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 255) {
#line 419 "acd.y"
{ &add_item ('hardmin', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 256) {
#line 420 "acd.y"
{ &add_item ('hardmax', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 257) {
#line 421 "acd.y"
{ &add_item ('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 258) {
#line 422 "acd.y"
{ &add_item ('pmismatch', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 259) {
#line 423 "acd.y"
{ &add_boolean_item ('tolowercase', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 260) {
#line 424 "acd.y"
{ &add_boolean_item ('touppercase', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 264) {
#line 432 "acd.y"
{ &add_item ('minimum', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 265) {
#line 433 "acd.y"
{ &add_item ('maximum', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 266) {
#line 434 "acd.y"
{ &add_boolean_item ('minsize', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 267) {
#line 435 "acd.y"
{ &add_boolean_item ('size', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 271) {
#line 443 "acd.y"
{ &add_item ('hardmin', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 272) {
#line 444 "acd.y"
{ &add_item ('hardmax', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 273) {
#line 445 "acd.y"
{ &add_boolean_item ('tolowercase', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 274) {
#line 446 "acd.y"
{ &add_boolean_item ('touppercase', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 278) {
#line 454 "acd.y"
{ &add_item('mintags', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 279) {
#line 455 "acd.y"
{ &add_boolean_item('multiple', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 280) {
#line 456 "acd.y"
{ &add_item('name', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 281) {
#line 457 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 282) {
#line 458 "acd.y"
{ &add_boolean_item ('nulldefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 283) {
#line 459 "acd.y"
{ &add_item ('precision', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 284) {
#line 460 "acd.y"
{ &add_item('rextension', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 285) {
#line 461 "acd.y"
{ &add_item('rformat', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 286) {
#line 462 "acd.y"
{ &add_item('rname', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 287) {
#line 463 "acd.y"
{ &add_item('ropenfile', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 288) {
#line 464 "acd.y"
{ &add_boolean_item('rscoreshow', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 289) {
#line 465 "acd.y"
{ &add_boolean_item('rusashow', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 290) {
#line 466 "acd.y"
{ &add_item('taglist', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 291) {
#line 467 "acd.y"
{ &add_item('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 293) {
#line 471 "acd.y"
{ &add_boolean_item ('entry', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 299) {
#line 483 "acd.y"
{ &add_item ('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 300) {
#line 484 "acd.y"
{ &add_item ('border', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 301) {
#line 485 "acd.y"
{ &add_item ('side', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 302) {
#line 486 "acd.y"
{ &add_item ('folder', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 306) {
#line 494 "acd.y"
{ &add_item ('codedelim', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 307) {
#line 495 "acd.y"
{ &add_item ('min', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 308) {
#line 496 "acd.y"
{ &add_item ('max', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 309) {
#line 497 "acd.y"
{ &add_item ('button', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 311) {
#line 499 "acd.y"
{ &add_item ('header', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 312) {
#line 500 "acd.y"
{ &add_item ('delim', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 313) {
#line 501 "acd.y"
{ &add_item ('values', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 317) {
#line 509 "acd.y"
{ &add_item ('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 318) {
#line 510 "acd.y"
{ &add_boolean_item ('features', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 319) {
#line 511 "acd.y"
{ &add_boolean_item ('entry', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 320) {
#line 512 "acd.y"
{ &add_boolean_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 321) {
#line 513 "acd.y"
{ &add_boolean_item ('aligned', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 322) {
#line 514 "acd.y"
{ &add_boolean_item ('minseqs', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 323) {
#line 515 "acd.y"
{ &add_boolean_item ('sask', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 327) {
#line 523 "acd.y"
{ &add_item ('label', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 328) {
#line 524 "acd.y"
{ &add_item ('extension', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 329) {
#line 525 "acd.y"
{ &add_item ('features', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 330) {
#line 526 "acd.y"
{ &add_item ('ossingle', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 331) {
#line 527 "acd.y"
{ &add_item ('osextension', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 332) {
#line 528 "acd.y"
{ &add_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 333) {
#line 529 "acd.y"
{ &add_item ('nulldefault', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 334) {
#line 530 "acd.y"
{ &add_item ('type', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 335) {
#line 531 "acd.y"
{ &add_boolean_item ('aligned', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 339) {
#line 539 "acd.y"
{ &add_item ('word', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 340) {
#line 540 "acd.y"
{ &add_item ('pattern', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 342) {
#line 544 "acd.y"
{ &add_item ('entry', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 343) {
#line 545 "acd.y"
{ &add_item ('maxreads', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 347) {
#line 553 "acd.y"
{ &add_item ('entry', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 348) {
#line 554 "acd.y"
{ &add_item ('maxreads', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 354) {
#line 566 "acd.y"
{ &add_item ('entry', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 355) {
#line 567 "acd.y"
{ &add_item ('maxreads', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 361) {
#line 579 "acd.y"
{ &add_item ('multiple', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 362) {
#line 580 "acd.y"
{ &add_item ('goutfile', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 370) {
#line 596 "acd.y"
{ &add_item ('minimum', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 371) {
#line 597 "acd.y"
{ &add_item ('maximum', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 372) {
#line 598 "acd.y"
{ &add_item ('increment', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 373) {
#line 599 "acd.y"
{ &add_item ('precision', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 374) {
#line 600 "acd.y"
{ &add_item ('warnrange', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 375) {
#line 601 "acd.y"
{ &add_item ('size', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 376) {
#line 602 "acd.y"
{ &add_item ('sum', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 377) {
#line 603 "acd.y"
{ &add_item ('sumtest', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 378) {
#line 604 "acd.y"
{ &add_item ('tolerance', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 382) {
#line 612 "acd.y"
{ &add_item ('length', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 383) {
#line 613 "acd.y"
{ &add_item ('size', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 384) {
#line 614 "acd.y"
{ &add_item ('continous', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 385) {
#line 615 "acd.y"
{ &add_item ('genedata', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 386) {
#line 616 "acd.y"
{ &add_item ('within', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 387) {
#line 617 "acd.y"
{ &add_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 391) {
#line 625 "acd.y"
{ &add_item ('size', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
if ($p->{yyn} == 392) {
#line 626 "acd.y"
{ &add_item ('nullok', $p->{yyvs}->[$p->{yyvsp}-0]); }
}
#line 3409 "ACDParser.pm"
    $p->{yyssp} -= $p->{yym};
    $p->{yystate} = $p->{yyss}->[$p->{yyssp}];
    $p->{yyvsp} -= $p->{yym};
    $p->{yym} = $yylhs[$p->{yyn}];
    if ($p->{yystate} == 0 && $p->{yym} == 0)
    {
      warn("yydebug: after reduction, shifting from state 0 ",
            "to state $YYFINAL\n") if $p->{yydebug};
      $p->{yystate} = $YYFINAL;
      $p->{yyss}->[++$p->{yyssp}] = $YYFINAL;
      $p->{yyvs}->[++$p->{yyvsp}] = $p->{yyval};
      if ($p->{yychar} < 0)
      {
        if ((($p->{yychar}, $p->{yylval}) = 
            &{$p->{yylex}}($s)) < 0) { $p->{yychar} = 0; }
        if ($p->{yydebug})
        {
          $p->{yys} = '';
          if ($p->{yychar} <= $#yyname) 
            { $p->{yys} = $yyname[$p->{yychar}]; }
          if (!$p->{yys}) { $p->{yys} = 'illegal-symbol'; }
          warn("yydebug: state $YYFINAL, reading " . 
               $p->{yychar} . " (" . $p->{yys} . ")\n");
        }
      }
      return ($p->{yyvs}->[1]) if $p->{yychar} == 0;
      next yyloop;
    }
    if (($p->{yyn} = $yygindex[$p->{yym}]) && 
        ($p->{yyn} += $p->{yystate}) >= 0 && 
        $p->{yyn} <= $#yycheck && 
        $yycheck[$p->{yyn}] == $p->{yystate})
    {
        $p->{yystate} = $yytable[$p->{yyn}];
    } else {
        $p->{yystate} = $yydgoto[$p->{yym}];
    }
    warn("yydebug: after reduction, shifting from state " . 
        $p->{yyss}->[$p->{yyssp}] . " to state " . 
        $p->{yystate} . "\n") if $p->{yydebug};
    $p->{yyss}[++$p->{yyssp}] = $p->{yystate};
    $p->{yyvs}[++$p->{yyvsp}] = $p->{yyval};
  } # yyloop
} # yyparse
#line 630 "acd.y"

# -----------------------------------------------------------------------------
# processing a qualifier (can deal with arbitrarily nested qualifiers)
# -----------------------------------------------------------------------------
$Order = 0;
sub start_qual {
    my ($qtype) = @_;
    push (@q, { qtype => $qtype });
    &add_item ('ordering', ++$Order);
}

sub add_item {
    my ($key, $val) = @_;
    if ($val =~ /^\s*[\@\$][\{\(]/) {
	&add_option ('options', "calculated_$key=$val");
	$val = '';
    }
#    $val = '' if $val =~ /^\s*[\@\$][\{\(]/; # currently no eval
    ${$q[$#q]}{$key} = $val;
}

sub add_boolean_item {
    my ($key, $val) = @_;
    $val = '' if $val =~ /^\s*[\@\$][\{\(]/; # currently no eval
    $val = ("\U$val" eq "Y") ? "+" : "-";
    ${$q[$#q]}{$key} = $val;
}


# --- any option has value in the form KEY = VALUE, and we want to add it
#     into an appropriate hash table as part of a separate hash table
#     which reference is stored under 'name' in a top-level, section or qualifier
#     hash
sub add_option {              # an option
    my ($name, $val) = @_;
    my ($key, $value) = split (/\s*[=: ]\s*/, $val, 2);   # separator can be :, =, or a spce
    $value = 'true' if $key and !$value;
    my ($rh);
    if (@q > 0) {
        ${$q[$#q]}{$name} = {} unless ${$q[$#q]}{$name};
        $rh = ${$q[$#q]}{$name};
    } else {
        $::app{$name} = {} unless $::app{$name};
        $rh = $::app{$name};
    }
    $$rh{"\L$key"} = $value;
}

# --- TBD: any option has value in the form KEY = VALUE, and we want to add it
#     into an appropriate hash table as part of a separate hash table
#     which reference is stored under 'name' in a top-level, section or qualifier
#     hash
sub add_relation {              # a relation
    my ($name, $val) = @_;
    my ($key, $value);
    if (substr ($val, 0, 1) eq '/') {
	# syntax for EMBOSS version 6.3.1 and prior
	# e.g. /edam/data/0000849 Sequence record
	($key, $value) = split (/\s*[=: ]\s*/, $val, 2);
	my (@parts) = split ('/', $key);
	$key = uc ($parts[1]) . ':' . $parts[-1];  # EDAM:0000849
	$value = $parts[-2] . ' ' . $value;        # data Sequence record
    } else {
	# syntax for EMBOSS version above 6.3.1
	# e.g. EDAM:0000849 data Sequence record
	($key, $value) = split (/\s*[= ]\s*/, $val, 2);
    }

    # the rest is copied from 'add_option'
    $value = 'true' if $key and !$value;
    my ($rh);
    if (@q > 0) {
        ${$q[$#q]}{$name} = {} unless ${$q[$#q]}{$name};
        $rh = ${$q[$#q]}{$name};
    } else {
        $::app{$name} = {} unless $::app{$name};
        $rh = $::app{$name};
    }
#    $$rh{"\L$key"} = $value;
    $$rh{$key} = $value;
}

sub end_qual {
    my ($id) = @_;
    my ($refnewq) = &finalize_qual ($id);

    if (@q > 0) {  # this qual is nested into the previous one
        my ($refprev) = $q[$#q];
        $$refprev{'nested'} = [] unless defined $$refprev{'nested'};
        push (@{$$refprev{'nested'}}, $refnewq);
    } else {       # this qual is on the highest level
        my ($qgroup) = ( $refnewq->{'required'} eq '+' ? 'mainq' : 'optq' );
        $qgroup = 'mainq' if $$refnewq{'qtype'} eq 'text' and defined $$refnewq{'datatype'};
        push (@{$::app{$qgroup}}, $refnewq);
    }
}


sub end_seqout {
    my ($id) = @_;
    my ($refnewq) = &finalize_qual ($id);
        
    $$refnewq{'help'} = "Returns sequence.";
    
    push (@{$::app{'optq'}}, $refnewq);
}


sub end_sequence {
    my ($id) = @_;
    my ($refnewq) = &finalize_qual ($id);

    # --- sequence parameters
    $$refnewq{'nfile'} = $id;
    $$refnewq{'nbegin'} = 'sbegin';
    $$refnewq{'nend'} = 'send';
    $$refnewq{'ntype'} = 'type=protein';
    $$refnewq{'nstrand'} = 'sreverse';

    # --- this appl may be only for one sequence type
    if ($::app{'type'} eq "P") {
	$::app{'type'} = "" unless $$refnewq{'type'} =~ /protein/i;
    } elsif ($::app{'type'} eq "N") {
	$::app{'type'} = "" unless $$refnewq{'type'} =~ /dna|rna|nucl/i;
    } elsif (!defined $::app{'type'}) {
	$::app{'type'} = "P" if $$refnewq{'type'} =~ /protein/i;
	$::app{'type'} = "N" if $$refnewq{'type'} =~ /dna|rna|nucl/i;
    }

    # --- store the qualifier where it belongs
    $::app{'input'} = [] unless defined $::app{'input'};
    push (@{$::app{'input'}}, $refnewq);

    # --- remember how many input sequences we have
    $::app{'numinput'} ++;
}

sub end_list {
	my ($id) = @_;
    my ($refnewq) = &finalize_qual ($id);

    # --- make two lists from 'values': the real values (will be used
    #     as qualifiers on the command line) and their descriptions
    #     (will be used as prompts)
    my ($delim) = $$refnewq{'delim'};
    $delim = ';' unless defined $delim;
    my (@prompts) = ();
    my (@quals) = ();
    my (@values) = split (/\s*\U$delim\E\s*/, $$refnewq{'values'});
    if ($$refnewq{'qtype'} eq 'list' or $$refnewq{'qtype'} eq 'selection' ) {
		my ($qual, $prompt);
		my ($codedelim) = $$refnewq{'codedelim'};
		$codedelim = ':' unless defined $codedelim;
        map { ($qual, $prompt) = split (/\s*\U\Q$codedelim\E\E\s*/);
	       push (@quals,  $qual);
	       push (@prompts, $prompt);
	  	} @values;
    } else {
		my ($order);
		map { push (@quals, ++$order);
              push (@prompts, $_);
	  	} @values;
    }

    # --- extract individual qualifier values from 'default'
    #     to be able to enable some bools elements
    my (%dflt) = {};
    map { $dflt{$_} = 1; } split (/\s*\U$delim\E\s*|\s+/, $$refnewq{'default'});

    # --- make from the current qualifier a 'parent' element
    #     which is either TEXT (represented actually by a radio dropdown button)
    #     or GROUP (aka MENU)
    my ($i);
    my ($radio) = ($$refnewq{'max'} == 1 and $$refnewq{'min'} == 1);
    if ($radio) {
		$$refnewq{'qtype'} = 'text';

        # --- for radio type we prepare 'rawlist' in the current qualifier
		$$refnewq{'rawlist'} = [];
        foreach $i (0..$#quals) {
	    push ( @{$$refnewq{'rawlist'}},
		   { 'value' => $quals[$i],
		     'shown_as' => $prompts[$i] } );
	    $$refnewq{'default'} = $quals[$i] if defined $dflt{$quals[$i]};
	}

    } else {
		$$refnewq{'qtype'} = 'group';
		$$refnewq{'separator'} = ',';

		# --- try to be clever and estimate how many 'columns' would
		#     be appropriate for the lengths of our prompts
		my ($maxlen) = 1;
		map { $maxlen = length ($_) if $maxlen < length ($_); } @prompts;
		my ($cols) = int (80/$maxlen);   # 80 is just my guess :-)
	        $cols = 5 if $cols > 5;
		$cols-- while ($cols > 1 and (@prompts % $cols) > 0 and ((@prompts % $cols) + 1) < $cols);
		$$refnewq{'columns'} = $cols;

        # --- for menu type put this qualifier back for a moment
        #     and build all its nested 'bools'
		push (@q, $refnewq);
		foreach $i (0..$#quals) {
		    &start_qual ('bool');
		    &add_item ('prompt', $prompts[$i]);
		    &add_item ('default', '+') if defined $dflt{$quals[$i]};
		    &add_item ('name', $quals[$i]);
		    &add_item ('qid', $$refnewq{'name'} . '_' . $quals[$i]);
		    &end_qual (undef);
		}
		$refnewq = pop (@q);
	}
    
    # --- a bit of cleaning
    delete $$refnewq{'values'};
    delete $$refnewq{'button'};
    delete $$refnewq{'delim'};
    delete $$refnewq{'codedelim'};

    # --- and finally put it where it belongs
    my ($qgroup) = ( $refnewq->{'required'} eq '+' ? 'mainq' : 'optq' );
    push (@{$::app{$qgroup}}, $refnewq);

}

sub end_section {
    my ($id) = @_;

    my $optq = $::app{'optq'};

    if (@$optq > 0 and $optq->[@$optq -1]->{'qid'} eq $id) {
       # --- empty section, last qualifier was begin section
       #     => don't show
       pop(@$optq);
    } else {
       &start_qual ('endsection');
       &end_qual ($id . "_END");
    }

    ## use Data::Dumper;
    ## my $dump =  "warn: endsection $id\n" .
    ## 		   join (", ", map { $_->{'name'} } @$optq);
    ## warn $dump;
}


# --- put ID and few other general attrs into the last qualifier,
#     remove it from the stack of qualifiers (@q), and return it
sub finalize_qual {
    my ($id) = @_;

    # --- remember parameter name
    if (defined $id) {
	&add_item ('qid', $id);
	&add_item ('name', $id);
    }

    my ($refnewq) = pop (@q);

    # --- primarily 'prompt' is made from 'header' or 'info' attributes
    #     (in this order), but if they do not exist, it can be made from
    #     the attribute 'prompt' (temporary stored in 'realprompt')
    #     or even from the attribute 'help'
    $refnewq->{'prompt'} = $refnewq->{'header'} if $refnewq->{'header'};
    unless ($refnewq->{'prompt'}) {
#        $refnewq->{'prompt'} = $refnewq->{'help'} if $refnewq->{'help'};
        $refnewq->{'prompt'} = $refnewq->{'realprompt'} if $refnewq->{'realprompt'};
    }
    delete $refnewq->{'realprompt'};

    return $refnewq;
}

sub is_yes {
    my ($val) = @_;

    return $val =~ /^\s*y/i;
}

# -----------------------------------------------------------------------------
# print an error message (called from parser, and lexer)
# -----------------------------------------------------------------------------
sub yyerror {
    my ($msg, $input) = @_;
    if (length ($Last_returned_token) > 40) {
	$Last_returned_token = substr ($Last_returned_token, 0, 40) . '...';
    }
    my ($err) = "File:" . $input->name .
	        ", line " .  $Token_line_number .
		" Token ==> " . $Last_returned_token . ", $msg";
    print STDERR "$err\n";
    @read_tokens = ();   # to start reading the next definition
}

# -----------------------------------------------------------------------------
#
# ACD Lexical analyzer.
# It uses globals: @all_tokens, @read_tokens,
#                  $Current_datatype,
#                  $Last_returned_token,
#                  $Token_line_number,
#                  %Opposite_delimiters
          
# -----------------------------------------------------------------------------
@read_tokens = ();

@general_attrs = qw (
		     DEFAULT PROMPT INFORMATION CODE HELP VALID EXPECTED STANDARD
		     ADDITIONAL PARAMETER MISSING CORBA STYLE COMMENT KNOWNTYPE
		     QUALIFIER TEMPLATE RELATIONS OUTPUTMODIFIER
		     NULLOK NULLDEFAULT FAILRANGE TRUEMINIMUM
		     );
@align_gen_attrs = qw (
		     AFORMAT AOPENFILE AEXTENSION ANAME AWIDTH AUSASHOW AGLOBAL
		     );
%all_tokens = (
    $DATA_TYPES   => [ qw( APPLICATION ALIGNMENT BOOLEAN DATAFILE
               DIRECTORY DIRLIST ENDSECTION FILELIST
			   INTEGER FLOAT RANGE REGEXP PATTERN_ STRING VARIABLE
			   INFILE MATRIX MATRIXF CODON SEQUENCE SEQSET SEQALL SEQSETALL FEATURES 
			   LIST SELECTION OUTCODON OUTDIR OUTFILE
			   OBO OUTOBO OUTRESOURCE OUTTAXON OUTTEXT OUTURL
			   REPORT RESOURCE SECTION SEQOUT SEQOUTSET
			   SEQOUTALL FEATOUT GRAPH XYGRAPH TOGGLE ARRAY DISCRETESTATES PROPERTIES
			   TAXON TEXT TREE FREQUENCIES DISTANCES URL
			)
		],
    $APPLICATION  => [ qw( BATCH CPU DOCUMENTATION EXECUTABLE EXTERNAL GROUPS
        COMMENT GUI NONEMBOSS SUPPLIER VERSION EMBASSY RELATIONS OBSOLETE) ],
    $ALIGNMENT    => [ @general_attrs, @align_gen_attrs, qw(NAME TYPE TAGLIST MINSEQS MAXSEQS MULTIPLE) ],
    $ARRAY        => [ @general_attrs, qw(MINIMUM MAXIMUM INCREMENT PRECISION WARNRANGE SIZE SUM SUMTEST TOLERANCE) ],
    $BOOLEAN      => [ @general_attrs ],
    $DATAFILE     => [ @general_attrs, qw(TYPE NAME EXTENSION DIRECTORY_ATTR NULLOK) ],
    $DIRECTORY    => [ @general_attrs, qw(NULLOK EXTENSION) ],
    $DIRLIST      => [ @general_attrs, qw(NULLOK EXTENSION) ],
    $DISCRETESTATES   => [ @general_attrs, qw(LENGTH, SIZE, CHARACTERS, NULLOK) ],
    $DISTANCES    => [ @general_attrs, qw(SIZE, NULLOK, MISSVAL) ],
    $ENDSECTION   => [ ],
    $FREQUENCIES  => [ @general_attrs, qw(LENGTH, SIZE, CONTINOUS, GENEDATA, WITHIN, NULLOK) ],
    $INTEGER      => [ @general_attrs, qw(MINIMUM MAXIMUM INCREMENT WARNRANGE) ],
    $FILELIST     => [ @general_attrs ],
    $FLOAT        => [ @general_attrs, qw(MINIMUM MAXIMUM INCREMENT WARNRANGE PRECISION) ],
    $RANGE        => [ @general_attrs, qw(MINIMUM MAXIMUM MINSIZE SIZE) ],
    $PATTERN_     => [ @general_attrs, qw(MINLENGTH MAXLENGTH LOWER UPPER TYPE PMISMATCH) ],
    $REGEXP       => [ @general_attrs, qw(MINLENGTH MAXLENGTH LOWER UPPER) ],
    $STRING       => [ @general_attrs, qw(MINLENGTH MAXLENGTH LOWER UPPER PATTERN WORD) ],
    $VARIABLE     => [ @general_attrs ],
    $INFILE       => [ @general_attrs, qw(TYPE NAME EXTENSION NULLOK TRYDEFAULT) ],
    $MATRIX       => [ @general_attrs, qw(PNAME NNAME PROTEIN) ],
    $MATRIXF      => [ @general_attrs, qw(PNAME NNAME PROTEIN) ],
    $CODON        => [ @general_attrs, qw(NAME NULLOK) ],
    $PROPERTIES   => [ @general_attrs, qw(LENGTH, SIZE, CHARACTERS, NULLOK) ],
    $SEQUENCE     => [ @general_attrs, qw(TYPE FEATURES ENTRY ALIGNED NULLOK SASK) ],
    $SEQSET       => [ @general_attrs, qw(TYPE FEATURES ENTRY ALIGNED MINSEQS MAXSEQS NULLOK MINSEQS) ],
    $SEQSETALL    => [ @general_attrs, qw(TYPE FEATURES ALIGNED MINSEQS MAXSEQS MINSETS MAXSETS NULLDEFAULT NULLOK) ],
    $SEQALL       => [ @general_attrs, qw(TYPE FEATURES ENTRY ALIGNED NULLOK) ],
    $FEATURES     => [ @general_attrs, qw(NAME EXTENSION TYPE MAXREADS ENTRY) ],
    $LIST         => [ @general_attrs, qw(MINIMUM MAXIMUM BUTTON CASESENSITIVE HEADER DELIMITER VALUES CODEDELIMITER) ],
    $REPORT       => [ @general_attrs, qw(NAME TYPE MINTAGS MULTIPLE TAGLIST REXTENSION RFORMAT RNAME ROPENFILE RSCORESHOW RUSASHOW PRECISION NULLOK NULLDEFAULT) ],
    $RESOURCE     => [ @general_attrs, qw(TYPE NAME ENTRY EXTENSION DIRECTORY_ATTR NULLOK) ],
    $SELECTION    => [ @general_attrs, qw(MINIMUM MAXIMUM BUTTON CASESENSITIVE HEADER CODEDELIMITER DELIMITER VALUES) ],
    $OBO          => [ @general_attrs, qw(TYPE NAME ENTRY EXTENSION DIRECTORY_ATTR NULLOK MAXREADS) ],
    $OUTCODON     => [ @general_attrs, qw(NAME EXTENSION NULLDEFAULT NULLOK ODIRECTORY OFORMAT) ],
    $OUTDIR       => [ @general_attrs, qw(NULLOK EXTENSION CREATE) ],
    $OUTFILE      => [ @general_attrs, qw(TYPE NAME EXTENSION NULLOK NULLDEFAULT APPEND) ],
    $OUTOBO       => [ @general_attrs, qw(TYPE NAME EXTENSION NULLOK NULLDEFAULT APPEND) ],
    $OUTTAXON     => [ @general_attrs, qw(TYPE NAME EXTENSION NULLOK NULLDEFAULT APPEND) ],
    $OUTTEXT      => [ @general_attrs, qw(TYPE NAME EXTENSION NULLOK NULLDEFAULT APPEND) ],
    $OUTRESOURCE  => [ @general_attrs, qw(TYPE NAME EXTENSION NULLOK NULLDEFAULT APPEND) ],
    $OUTURL       => [ @general_attrs, qw(TYPE NAME EXTENSION NULLOK NULLDEFAULT APPEND) ],
    $SECTION      => [ @general_attrs, qw(TYPE BORDER SIDE FOLDER) ],
    $SEQOUT       => [ @general_attrs, qw(NAME EXTENSION FEATURES TYPE NULLOK) ],
    $SEQOUTSET    => [ @general_attrs, qw(NAME EXTENSION FEATURES TYPE ALIGNED) ],
    $SEQOUTALL    => [ @general_attrs, qw(NAME EXTENSION FEATURES TYPE OSEXTENSION OSSINGLE NULLOK ALIGNED) ],
    $TAXON        => [ @general_attrs, qw(TYPE NAME ENTRY EXTENSION DIRECTORY_ATTR NULLOK MAXREADS) ],
    $TEXT         => [ @general_attrs, qw(TYPE NAME ENTRY EXTENSION DIRECTORY_ATTR NULLOK MAXREADS) ],
    $TREE         => [ @general_attrs, qw(SIZE, NULLOK) ],
    $FEATOUT      => [ @general_attrs, qw(NAME EXTENSION OFNAME OFFORMAT TYPE NULLOK NULLDEFAULT) ],
    $GRAPH        => [ @general_attrs, qw(TYPE GDESC GTITLE GXTITLE GYTITLE GSUBTITLE NULLOK) ],
    $XYGRAPH      => [ @general_attrs, qw(TYPE GDESC GTITLE GXTITLE GYTITLE GSUBTITLE GOUTFILE MULTIPLE NULLOK NULLDEFAULT) ],
    $TOGGLE       => [ @general_attrs ],
    $NULLOK       => [ @general_attrs ],
    $URL          => [ @general_attrs, qw(TYPE NAME ENTRY EXTENSION DIRECTORY_ATTR NULLOK MAXREADS) ]
    );

%Opposite_delimiters = ( '[' => ']', '<' => '>', '{' => '}', '"' => '"', "'" => "'" );

#
# This lex reads one "definition" in a time (either application definition or
# parameter definition), The definition ends by a non-escaped "]" (if it is
# not inside a quoted token). It stores it in @read_tokens - and returns a
# token each time it is called.
#
# It recognizes these types of tokens:
#
# - Single character separators: '=', ':', '[', and ']', they are returned
#   as they are, with no value attached.
#
# - "Real" tokens  (here belong acd datatypes and 'appl' token). They can be
#   abbreviated - therefore the lex must first find what acd token they really
#   represent. The lex considers anything _before_ ':' or '=' as a "real"
#   token.
#
# - Everything else is returned as token VALUE.
#
# During reading of one definition into @read_tokens the lex takes care about:
# - escaped characters,
# - quoted parts which represent always just a single token (quotation
#   pairs are "", '', {}, <>, [])
# - perl-like comments
#
sub yylex {
    my ($input) = @_;

    # --- get next definition from $input into @read_tokens
    #     (unless we still have some tokens from the previous visit)
    if ($#read_tokens == -1) {
	my ($c, $val);
	my ($outside_token) = 1;
	my ($current_delimiter);
	my ($square_bracket_opened) = 0;
        my ($reading_value) = 0;
        $Newline_significant = 0;
    
	while (($c = $input->getc) ne '') {

    	    #
	    # --- we are outside of a token
	    #
	    if ($outside_token) {

		# --- comment
		if ($c eq '#') {
		    &ignore_till ($input, "\n");
		    next; 
		}

		# --- escape sequence
		#     (actually it makes no sense to use escape
		#      sequence outside of a token...)
		if ($c eq '\\') {
		    $c = $input->getc;
		    if ($c eq '') {
			&yyerror ("Unexpected EOF in an escape sequence.", $input);
			last;   # eof with pending escape delimiter
		    }
		}

		# --- newline is usually ignored - but it may also indicates
		#     an end of this definition - see &is_defend
                last if &is_defend ($c);
    
		# --- ignore white-spaces (even those escaped above:-))
		next if $c =~ /\s/;

		# --- square brackets can be both token delimiters and
		#     a special separator in definitions
		if ($c eq '[' and $square_bracket_opened == 0) {
		    push (@read_tokens, [ord ($c), $c, $input->lineno]);
		    $square_bracket_opened = 1;
		    next;
		}
		if ($c eq ']' and $square_bracket_opened) {
		    push (@read_tokens, [ord ($c), $c, $input->lineno]);
		    last;   # end of a definition reached
		}

		# --- special separators are treated as individual tokens
		#     (also if they are escaped... which makes no sense probably)
		if ($c =~ /[:=]/) {
    		    push (@read_tokens, [ord ($c), $c, $input->lineno]);
                    $reading_value = 1;
		    next;
		}

                # we need special treatment for token 'variable'
                if ($#read_tokens > -1 and ${$read_tokens[0]}[1] =~ /^(v|ends)/i) {
                    $Newline_significant = 1;
                    $reading_value = 1;
                }
    
		# --- now we know that a token starts here
		#     (if it starts with a delimiter, remember it to
		#      be able to match with the ending delimiter)
		$outside_token = 0;
		if ($c =~ /["'{<\[]/) {
		    $current_delimiter = $Opposite_delimiters{$c};
		    next;
		}
		$val = $c;
    		next;
	    }

	    #
	    # --- we are inside a token
	    #

	    # --- escape sequence
	    if ($c eq '\\') {
		$c = $input->getc;
		if ($c eq '') {
		    &yyerror ("Unexpected EOF.", $input);
		    last;   # eof with pending escape delimiter
			    # AND inside a token - surely an error
		}
		$val .= $c;
		next;
	    }

	    # --- are we inside a token with delimiters?
	    if ($current_delimiter) {

		# --- end of a delimited token?        
		if ($c eq $current_delimiter) {
		    undef $current_delimiter;
		    $outside_token = 1;
    		    push (@read_tokens, [($reading_value ? $VALUE : undef), $val, $input->lineno]);
		    undef $val;
                    undef $reading_value;
		    next;
		}

		# --- replace each non-escaped newline by a single space
###		$c = ' ' if $c eq "\n";    # 15.10.00 - Alan said not to ignore them

		$val .= $c;
		next;
	    }

	    # --- comment (a bit unusual because it is not separated
	    #     from the current token by a whitespace, but valid)
	    if ($c eq '#') {
		$outside_token = 1;
		push (@read_tokens, [($reading_value ? $VALUE : undef), $val, $input->lineno]);
		undef $val;
                undef $reading_value;
		&ignore_till ($input, "\n");
                last if &is_defend ($c);
		next;
	    }

	    # --- end of a non-delimited token?
	    if (($reading_value and $c =~ /[\s\[\]]/) or
                (!$reading_value and $c =~ /[\s:=\[\]]/)) {
		$outside_token = 1;
                $input->ungetc;
		push (@read_tokens, [ ($reading_value ? $VALUE : undef), $val, $input->lineno]);
                undef $reading_value;
		undef $val;
                last if &is_defend ($c);
    		next;
	    }
    
            # --- finally, we know that we have just a piece of token
            $val .= $c;
	}

        # --- for each definition we will have to find its datatype
        undef $Current_datatype;

###        print ("ALL---\n\t" . join ("\n\t", map { $$_[1] } @read_tokens) . "\n------------\n");
    }

    # --- use @read_tokens
    #     (elements of @read_tokens are references to 3-values arrays:
    #      [0] is a token, or undef if we still do not know,
    #      [1] is a value for this token, and
    #      [2] is a line number where the token was read from)
    return 0 if $#read_tokens < 0;    # EOF reached
    my ($ra) = shift @read_tokens;

    # --- remember for better error messages
    $Last_returned_token = $$ra[1];
    $Token_line_number = $$ra[2];

###    print ("\nTOKEN ==> " . $$ra[1] . "\n");

    # --- non-attributes tokens are already fully prepared
    return ($$ra[0], $$ra[1]) if defined $$ra[0];
    
    # --- the first token from a definition?
    #     (if yes, it represents a data type which we will store in
    #      $Current_datatype to be able later find only valid
    #      tokens for this data type)
    unless (defined $Current_datatype) {
        $Current_datatype = &match_token ($$ra[1], $input, $DATA_TYPES);
        return $Current_datatype;
    }

    # --- everything what remains can be only a attribute name
    #     but it may be abbreviated, therefore we must call
    #     &match_token with the $Current_datatype to find the full
    #     token name
    return &match_token ($$ra[1], $input, $Current_datatype);
}

# -----------------------------------------------------------------------------
# Newline is usually ignored - but it may also indicates
# an end of an application/parameter definition. In these cases:
#    - if the current definition has not (yet) have an opening bracket '['
#      (which usually means that it is a definition for a variable)
# -----------------------------------------------------------------------------
sub is_defend {
    my ($c) = @_;
    return undef unless $c eq "\n";
    my ($newline_significant) = $Newline_significant;
    $Newline_significant = 0;
    return undef unless $#read_tokens > -1;
    local ($_);
    foreach (@read_tokens) {
        return undef if $$_[0] eq ord ('[');
    }
    return ($newline_significant ? 1 : undef);
}

# -----------------------------------------------------------------------------
# Ignore characters read from $input until a character
# $till appears (that one ignore also), or untill EOF
# -----------------------------------------------------------------------------
sub ignore_till {
    my ($input, $till) = @_;
    my ($c);
    while (($c = $input->getc) ne '') {
        if ($c eq $till) {
	    $input->ungetc;
	    return;
	}
    }
}
    
# -----------------------------------------------------------------------------
# Find (in the list %all_tokens) a proper token and return it;
# be prepared to match also 'shorter' names (e.g. this subroutine
# can get "def" and it is expected to return token $DEFAULT);
# if not found, call the error routine.
#
# Each token is matched with its own list defined by $datatype
# (which is a key to the hash %all_tokens).
# -----------------------------------------------------------------------------
sub match_token {
    my ($token, $input, $datatype) = @_;
    $token =~ tr/a-z/A-Z/;
    local ($_);
    my ($ra_my_tokens) = $all_tokens{$datatype};
    foreach (@$ra_my_tokens) {
	return eval ('$' . $_)  if $_ =~ /^\Q$token\E/;
    }
#    if ( $ENV{'YYDEBUG'} ) {
       local (@read_tokens); # keep value of @read_tokens (modified in yyerror)
       &yyerror ("Unrecognized token.", $input);
#    }
    return ($W2HUNKNOWN);
}

# ----------------------- that's all for parsing stuff ------------------------

1;
#line 4112 "ACDParser.pm"
1;
